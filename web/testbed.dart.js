// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.ListIterator = {"": "Object;_iterable,_liblib$_length,_index,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._liblib$_length;
    t2 = this._iterable;
    if (t1 !== t2.length)
      throw $.$$throw($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = $.JSArray_methods.elementAt$1(t2, t3);
    this._index = this._index + 1;
    return true;
  }
};

$$.ToString__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    t1.write$1(": ");
    $.ToString__emitObject(v, t1, t2);
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0) === true)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(key);
    t1.sb_0.write$1(": ");
    t1.sb_0.write$1($.Error_safeToString(value));
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  }
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  }
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
};

$$.JSNull = {"": "Object;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
};

$$.CloseToken = {"": "Object;", $isCloseToken: true};

$$.JsIsolateSink = {"": "StreamSink;_isClosed,_port<",
  add$1: function(_, message) {
    this._port.send$1(message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!other.$isIsolateSink && $.$eq(this._port, other.get$_port()) === true;
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asIsolateSink: null,
  $isIsolateSink: true
};

$$._Manager = {"": "Object;nextIsolateId@,currentManagerId,nextManagerId,currentContext<,rootContext,topEventLoop<,fromCommandLine,isWorker<,supportsWorkers,isolates,mainManager,managers",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = $.get$globalWorker() != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true) {
      var t1 = this.isolates;
      t1 = t1.get$isEmpty(t1) && this.topEventLoop.activeTimerCount === 0;
    } else
      t1 = false;
    if (t1) {
      t1 = this.mainManager;
      t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "close"])));
    }
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map();
    this.managers = $.Map_Map();
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id>,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw $.$$throw($._ExceptionImplementation$("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    t1 = this.ports;
    if (t1.get$isEmpty(t1)) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId(t2 + 1);
    this.id = t2;
    this.ports = $.Map_Map();
    this.isolateStatics = new Isolate;
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount",
  enqueue$3: function(isolate, fn, msg) {
    var t1 = this.events;
    t1.addLast$1(t1, $._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1.get$isEmpty(t1))
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null)
      if ($globalState.isolates.containsKey$1($globalState.rootContext.id))
        if ($globalState.fromCommandLine === true) {
          var t1 = $globalState.rootContext.ports;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    if (t1)
      throw $.$$throw($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.Timer_run(this);
  }
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;",
  get$id: function(_) {
    return 0;
  },
  postMessage$1: function(_, msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function(_) {
  }
};

$$.IsolateNatives__processWorkerMessage_function = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  }
};

$$._BaseSendPort = {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_WorkerSendPort) && true)
      throw $.$$throw($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._CompleterImpl$();
    port = $.ReceivePortImpl$();
    this.send$2(message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.future;
  },
  $isSendPort: true
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1.close$0(t1);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!value.$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(t1, value);
  }
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!other.$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort) === true;
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_liblib0$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $.$eq($.get$id$x($globalState.currentContext), t2.get$_isolateId()) !== true;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  }
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_liblib0$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_receivePort();
      t2 = this.box_0;
      t1._liblib0$_callback$2(t2.msg_0, t2.reply_1);
    }
  }
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$is_WorkerSendPort)
      t1 = $.$eq(this._workerId, other._workerId) === true && $.$eq(this._isolateId, other._isolateId) === true && $.$eq(this._receivePortId, other._receivePortId) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = $.$shl$n(this._workerId, 16);
    t2 = $.$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      t1 = $globalState.mainManager;
      t1.postMessage$1(t1, workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        $.postMessage$1$x(manager, workerMessage);
    }
  }
};

$$.ReceivePortImpl = {"": "Object;_id<,_liblib0$_callback<",
  _liblib0$_callback$2: function(arg0, arg1) {
    return this._liblib0$_callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._liblib0$_callback = onMessage;
  },
  close$0: function(_) {
    this._liblib0$_callback = null;
    $globalState.currentContext.unregister$1(this._id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $.get$id$x($globalState.currentContext));
  },
  ReceivePortImpl$0: function() {
    $._globalState().get$currentContext().register$2(this._id, this);
  }
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_anon(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    t1 = map.get$values(map);
    t1.forEach$1(t1, new $._PendingSendPortFinder_visitMap_anon(this));
  },
  visitSendPort$1: function(port) {
    if (false)
      this.ports.push(port.get$_futurePort());
  },
  visitIsolateSink$1: function(sink) {
    this.visitSendPort$1(sink._port);
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.$$throw("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $globalState.currentManagerId, port._isolateId, port._receivePort.get$_id()];
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._receivePort, port._isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
  },
  visitIsolateSink$1: function(sink) {
    var isClosed, result;
    isClosed = sink._isClosed;
    result = $.JsIsolateSink$fromPort(this.visitSendPort$1(sink._port));
    result._isClosed = isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $globalState.currentManagerId) === true) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, isClosed, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    isClosed = t1.$index(list, 2);
    result = $.JsIsolateSink$fromPort(port);
    result._isClosed = isClosed;
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return $.CONSTANT6;
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(_, object) {
    return object['__MessageTraverser__attached_info__'];
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    object['__MessageTraverser__attached_info__'] = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List($);
  },
  cleanup$0: function() {
    var $length, i;
    for ($length = $.get$length$asx(this.tagged), i = 0; i < $length; ++i)
      $.$index$asx(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.$isList()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!x.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!x.$isCloseToken)
      return this.visitCloseToken$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, t2, i;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (i = 0; i < len; ++i) {
      t2 = this._dispatch$1(t1.$index(list, i));
      if (i >= len)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.HashMap$();
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    $.$indexSet$ax(t1, t2._dispatch$1(key), t2._dispatch$1(val));
  }
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id, keys, t2;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = map.get$keys();
    keys = this._serializeList$1(t1.toList$0(t1));
    t2 = map.get$values(map);
    return ["map", id, keys, this._serializeList$1(t2.toList$0(t2))];
  },
  _serializeList$1: function(list) {
    var len, result, i;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior()))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      result[i] = this._dispatch$1(list[i]);
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len);
    for (t2 = result.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap$();
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch ($.$index$asx(x, 0)) {
      case "ref":
        return this._deserializeRef$1(x);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeRef$1: function(x) {
    var id, t1;
    id = $.$index$asx(x, 1);
    t1 = this._deserialized;
    return t1.$index(t1, id);
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, t2, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.$isJavaScriptIndexingBehavior())
      return this._deserializeList$1$bailout(1, dartList, id);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t2, len, i;
    t2 = this._deserialized;
    t2.$indexSet(t2, id, dartList);
    t2 = $.getInterceptor$asx(dartList);
    len = t2.get$length(dartList);
    for (i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      t2.$indexSet(dartList, i, this._deserializeHelper$1(t2.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.HashMap$();
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !keys.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !values.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(2, 0, result, keys, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, x, result, keys, t1, values) {
    switch (state0) {
      case 0:
        result = $.HashMap$();
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, t3, len, i;
        state0 = 0;
        t3 = $.getInterceptor$asx(keys);
        len = t3.get$length(keys);
        for (t1 = $.getInterceptor$asx(values), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t3.$index(keys, i)), this._deserializeHelper$1(t1.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle?",
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if (milliseconds === 0)
      t1 = $.hasTimer() !== true || $._globalState().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), callback, "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer() === true) {
      t1 = $._globalState().get$topEventLoop();
      t1.activeTimerCount = t1.activeTimerCount + 1;
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.internalCallback = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
  }
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  addAll$1: function(receiver, collection) {
    var t1, t2;
    for (t1 = this.get$iterator(collection); t1.moveNext$0();) {
      t2 = t1.get$current();
      $.checkGrowable(receiver, "add");
      receiver.push(t2);
    }
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  elementAt$1: function(receiver, index) {
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    $.checkNull(start);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (start < 0 || start > receiver.length)
      throw $.$$throw($.RangeError$range(start, 0, receiver.length));
    if (end == null)
      end = receiver.length;
    else {
      throw $.$$throw($.ArgumentError$(end));
      if ($.JSNull_methods.$lt(end, start) || $.JSNull_methods.$gt(end, receiver.length))
        throw $.$$throw($.RangeError$range(end, start, receiver.length));
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  setRange$4: function(receiver, start, $length, from, startFrom) {
    $.checkMutable(receiver, "set range");
    $.IterableMixinWorkaround_setRangeList(receiver, start, $length, from, startFrom);
  },
  toString$0: function(receiver) {
    return $.ToString_collectionToString(receiver);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  }
};

$$.JSMutableArray = {"": "JSArray;",
  $asList: function() {
    return function () { return [null]; };
  },
  $asCollection: function() {
    return function () { return [null]; };
  }
};

$$.JSFixedArray = {"": "JSMutableArray;"};

$$.JSExtendableArray = {"": "JSMutableArray;"};

$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.StackTrace = {"": "Object;stack",
  toString$0: function(_) {
    var t1 = this.stack;
    return t1 != null ? t1 : "";
  }
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
};

$$.Null = {"": "Object;"};

$$.JSNumber = {"": "Object;",
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  remainder$1: function(receiver, b) {
    $.checkNull(b);
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver))
      throw $.$$throw($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver))
      throw $.$$throw($.UnsupportedError$("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  truncate$0: function(receiver) {
    return this.toInt$0(receiver);
  },
  round$0: function(receiver) {
    return this.toInt$0(this.roundToDouble$0(receiver));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return (receiver << other) >>> 0;
  },
  $and: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true
};

$$.JSInt = {"": "JSNumber;", $is$int: true, $isnum: true};

$$.JSDouble = {"": "JSNumber;", $is$double: true, $isnum: true};

$$.JSString = {"": "Object;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    if (startIndex < 0)
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.JSNumber_methods.$gt(startIndex, endIndex))
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$gt$n(endIndex, receiver.length) === true)
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
};

$$._Random = {"": "Object;",
  nextInt$1: function(max) {
    if (typeof max !== "number")
      return this.nextInt$1$bailout(1, max);
    if (max < 0)
      throw $.$$throw($.ArgumentError$("negative max: " + $.S(max)));
    if (max > 4294967295)
      max = 4294967295;
    return (Math.random() * max) >>> 0;
  },
  nextInt$1$bailout: function(state0, max) {
    var t1 = $.getInterceptor$n(max);
    if (t1.$lt(max, 0) === true)
      throw $.$$throw($.ArgumentError$("negative max: " + $.S(max)));
    if (t1.$gt(max, 4294967295) === true)
      max = 4294967295;
    return (Math.random() * max) >>> 0;
  }
};

$$.MetaInfo = {"": "Object;_tag<,_tags,_set<"};

$$.AsyncError = {"": "Object;error>,stackTrace<,cause<",
  _writeOn$1: function(buffer) {
    var message, exception, t1;
    buffer.write$1("'");
    message = null;
    try {
      message = $.toString$0(this.error);
    } catch (exception) {
      $.unwrapException(exception);
      message = $.Error_safeToString(this.error);
    }

    buffer.write$1(message);
    buffer.write$1("'\n");
    t1 = this.stackTrace;
    if (t1 != null) {
      buffer.write$1("Stack trace:\n");
      buffer.writeln$1($.toString$0(t1));
    }
  },
  toString$0: function(_) {
    var buffer, cause;
    buffer = $.StringBuffer$("");
    buffer.write$1("AsyncError: ");
    this._writeOn$1(buffer);
    cause = this.cause;
    for (; cause != null;) {
      buffer.write$1("Caused by: ");
      cause._writeOn$1(buffer);
      cause = cause.get$cause();
    }
    return buffer.toString$0(buffer);
  },
  $isAsyncError: true
};

$$._CompleterImpl = {"": "Object;future,_isComplete",
  complete$1: function(_, value) {
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._liblib1$_setValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    var asyncError;
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    asyncError = typeof error === "object" && error !== null && !!error.$isAsyncError ? error : $.AsyncError$(error, stackTrace);
    this.future._setError$1(asyncError);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._liblib1$_setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state@,_resultOrListeners<",
  get$_isComplete: function() {
    return this._state !== 0;
  },
  get$_hasValue: function() {
    return this._state === 1;
  },
  get$_hasError: function() {
    return (this._state & 2) !== 0;
  },
  get$_hasUnhandledError: function() {
    return (this._state & 4) !== 0;
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (!this.get$_isComplete()) {
      if (onError == null) {
        t1 = $._ThenFuture$(f);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError()) {
      if (onError != null)
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue())
      return $._FutureWrapper$(this);
    if (!this.get$_isComplete()) {
      t1 = $._CatchErrorFuture$(f, test);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue);
    $.Timer_run(new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._state = (this._state & 4294967291) >>> 0;
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test);
    $.Timer_run(new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  _liblib1$_setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_liblib1$_setValue: function() {
    return new $.BoundClosure$1(this, "_liblib1$_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = (this._state | 4) >>> 0;
    $.Timer_run(new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener.set$_nextListener(this._resultOrListeners);
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (!this.get$_isComplete())
      this._addListener$1(future._asListener$0());
    else if (this.get$_hasValue())
      future._liblib1$_setValue$1(this._resultOrListeners);
    else {
      this._state = (this._state & 4294967291) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!result.$isFuture)
      if (!!result.$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_liblib1$_setValue(), this.get$_setError());
        return;
      }
    else
      this._liblib1$_setValue$1(result);
  },
  _asListener$0: function() {
    return $._FutureListenerWrapper$(this);
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._FutureImpl__FutureImpl$wait_handleError = {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$2($.get$error$x(error), error.get$stackTrace());
    }
  }
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    $.$indexSet$ax(t2, this.pos_1, value);
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0) === true) {
      t2 = t1.completer_0;
      t2.complete$1(t2, t1.values_1);
    }
  }
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$0: function() {
    this.thenFuture_0._sendValue$1(this.value_1);
  }
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$0: function() {
    this.errorFuture_1._sendError$1(this.error_0);
  }
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1, error, t2;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError()) {
      t1.set$_state((t1.get$_state() & 4294967291) >>> 0);
      error = t1.get$_resultOrListeners();
      t1 = $.getInterceptor$x(error);
      $.Primitives_printString("Uncaught Error: " + $.S(t1.get$error(error)));
      t2 = error.get$stackTrace();
      if (t2 != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(t2) + "\n");
      throw $.$$throw(t1.get$error(error));
    }
  }
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener@",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._liblib1$_setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, e1, s0, exception, t1;
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = this._test$1($.get$error$x(error));
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e, s, error));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e0 = t1;
        this._setError$1(e0);
        return;
      } else {
        e1 = t1;
        s0 = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e1, s0, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e0, s, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function($function, onError) {
    return this._future.then$2$onError($function, onError);
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    return this._future.catchError$2$test($function, test);
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  $isFuture: true
};

$$.Stream = {"": "Object;",
  get$length: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.count_0 = 0;
    t2 = new $.Stream_length_anon(t1);
    t3 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_length_anon0(t1, future), t3, true);
    return future;
  }
};

$$.Stream_length_anon = {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  }
};

$$.Stream_length_anon0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._liblib1$_setValue$1(this.box_0.count_0);
  }
};

$$.StreamSubscription = {"": "Object;"};

$$.StreamSink = {"": "EventSink;"};

$$.EventSink = {"": "Object;"};

$$.Timer_run_anon = {"": "Closure;",
  call$0: function() {
    var runCallbacks, i, callback, newCallbacks, exception;
    runCallbacks = $.get$Timer__runCallbacks();
    $.Timer__runCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(runCallbacks)) === true; i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(runCallbacks, i);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        newCallbacks = $.get$Timer__runCallbacks();
        $.Timer__runCallbacks = [];
        i = $.$add$ns(i, 1);
        $.addAll$1$ax($.get$Timer__runCallbacks(), $.sublist$1$ax(runCallbacks, i));
        $.addAll$1$ax($.get$Timer__runCallbacks(), newCallbacks);
        throw exception;
      }

    }
  }
};

$$._HashMapTable = {"": "_HashTable;_table,_capacity,_entryCount,_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 2;
  },
  _value$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._value$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._value$1$bailout(2, offset, t1);
    t3 = offset + 1;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _value$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$index$asx(t1, $.$add$ns(offset, 1));
    }
  },
  _setValue$2: function(offset, value) {
    $.$indexSet$ax(this._table, $.$add$ns(offset, 1), value);
  },
  _copyEntry$3: function(fromTable, fromOffset, toOffset) {
    var t1, t3, t4;
    if (typeof fromTable !== "object" || fromTable === null || (fromTable.constructor !== Array || !!fromTable.immutable$list) && !fromTable.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(1, fromTable, fromOffset, toOffset);
    if (typeof toOffset !== "number")
      return this._copyEntry$3$bailout1(1, fromTable, fromOffset, toOffset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(2, fromTable, fromOffset, toOffset, t1);
    t3 = toOffset + 1;
    t4 = fromOffset + 1;
    if (t4 < 0 || t4 >= fromTable.length)
      throw $.ioore(t4);
    t4 = fromTable[t4];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = t4;
  },
  _copyEntry$3$bailout1: function(state0, fromTable, fromOffset, toOffset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        $.$indexSet$ax(t1, $.$add$ns(toOffset, 1), $.$index$asx(fromTable, fromOffset + 1));
    }
  }
};

$$.HashMap = {"": "Object;_hashTable<",
  containsKey$1: function(key) {
    return $.$ge$n(this._hashTable._get$1(key), 0);
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.HashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var t1, offset;
    t1 = this._hashTable;
    offset = t1._get$1(key);
    if ($.$ge$n(offset, 0))
      return t1._value$1(offset);
    return;
  },
  $indexSet: function(_, key, value) {
    var t1 = this._hashTable;
    t1._setValue$2(t1._put$1(key), value);
    t1._checkCapacity$0();
  },
  remove$1: function(_, key) {
    var t1, offset, oldValue;
    t1 = this._hashTable;
    offset = t1._remove$1(key);
    if ($.$lt$n(offset, 0))
      return;
    oldValue = t1._value$1(offset);
    t1._setValue$2(offset, null);
    t1._checkCapacity$0();
    return oldValue;
  },
  forEach$1: function(_, action) {
    var t1, modificationCount, table, entrySize, t2, offset, entry;
    t1 = this._hashTable;
    modificationCount = t1._modificationCount;
    table = t1._table;
    if (typeof table !== "object" || table === null || (table.constructor !== Array || !!table.immutable$list) && !table.$isJavaScriptIndexingBehavior())
      return this.forEach$1$bailout(1, action, table, t1, modificationCount);
    entrySize = t1.get$_entrySize();
    for (t2 = table.length, offset = 0; offset < t2; offset += entrySize) {
      if (offset < 0)
        throw $.ioore(offset);
      entry = table[offset];
      if (!t1._isFree$1(entry)) {
        action.call$2(entry, t1._value$1(offset));
        t1._checkModification$1(modificationCount);
      }
    }
  },
  forEach$1$bailout: function(state0, action, table, t1, modificationCount) {
    var entrySize, t2, offset, entry;
    entrySize = t1.get$_entrySize();
    for (t2 = $.getInterceptor$asx(table), offset = 0; offset < t2.get$length(table); offset += entrySize) {
      entry = t2.$index(table, offset);
      if (!t1._isFree$1(entry)) {
        action.call$2(entry, t1._value$1(offset));
        t1._checkModification$1(modificationCount);
      }
    }
  },
  get$keys: function() {
    return $._HashTableKeyIterable$(this._hashTable);
  },
  get$values: function(_) {
    return $._HashTableValueIterable$(this._hashTable, 1);
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return this._hashTable.get$_elementCount() === 0;
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  HashMap$0: function() {
    this._hashTable._container = this;
  },
  $isMap: true
};

$$.HashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1, offset;
    t1 = this.this_0;
    offset = t1.get$_hashTable()._put$1(key);
    t1.get$_hashTable()._setValue$2(offset, value);
    t1.get$_hashTable()._checkCapacity$0();
  }
};

$$._DeadEntry = {"": "Object;"};

$$._NullKey = {"": "Object;",
  get$hashCode: function(_) {
    return $.JSNull_methods.get$hashCode(null);
  }
};

$$._HashTable = {"": "Object;",
  _key$1: function(offset) {
    var t1, key;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._key$1$bailout(1, offset, t1);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    key = t1[offset];
    if (key !== $.CONSTANT2)
      return key;
    return;
  },
  _key$1$bailout: function(state0, offset, t1) {
    var key = $.$index$asx(t1, offset);
    if (key !== $.CONSTANT2)
      return key;
    return;
  },
  get$_elementCount: function() {
    return this._entryCount - this._deletedCount;
  },
  get$_entrySize: function() {
    return 1;
  },
  _checkModification$1: function(expectedModificationCount) {
    if (this._modificationCount !== expectedModificationCount)
      throw $.$$throw($.ConcurrentModificationError$(this._container));
  },
  _recordModification$0: function() {
    this._modificationCount = this._modificationCount + 1 & 1073741823;
  },
  _createTable$1: function(capacity) {
    return $.List_List($.$mul$n(capacity, this.get$_entrySize()));
  },
  _nextProbe$3: function(previousIndex, probeCount, capacity) {
    if (typeof capacity !== "number")
      return this._nextProbe$3$bailout(1, previousIndex, probeCount, capacity);
    return (previousIndex + probeCount & capacity - 1) >>> 0;
  },
  _nextProbe$3$bailout: function(state0, previousIndex, probeCount, capacity) {
    var t1 = $.$sub$n(capacity, 1);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return (previousIndex + probeCount & t1) >>> 0;
  },
  _isFree$1: function(marker) {
    return marker == null || marker === $.CONSTANT1;
  },
  _probeForAdd$2: function(hashCode, object) {
    var entrySize, index, t1, firstTombstone, probeCount, offset, entry;
    entrySize = this.get$_entrySize();
    index = $.$and$n(hashCode, $.$sub$n(this._capacity, 1));
    for (t1 = null == object, firstTombstone = -1, probeCount = 0; true;) {
      offset = index * entrySize;
      entry = $.$index$asx(this._table, offset);
      if (entry === $.CONSTANT1) {
        if (firstTombstone < 0)
          firstTombstone = offset;
      } else if (entry == null) {
        if (firstTombstone < 0)
          return offset;
        return firstTombstone;
      } else if (($.CONSTANT2 === entry ? t1 : $.$eq(entry, object)) === true)
        return offset;
      ++probeCount;
      index = this._nextProbe$3(index, probeCount, this._capacity);
    }
  },
  _probeForLookup$2: function(hashCode, object) {
    var entrySize, index, t1, probeCount, offset, entry;
    entrySize = this.get$_entrySize();
    index = $.$and$n(hashCode, $.$sub$n(this._capacity, 1));
    for (t1 = null == object, probeCount = 0; true;) {
      offset = index * entrySize;
      entry = $.$index$asx(this._table, offset);
      if (entry == null)
        return -1;
      else if ($.CONSTANT1 !== entry)
        if (($.CONSTANT2 === entry ? t1 : $.$eq(entry, object)) === true)
          return offset;
      ++probeCount;
      index = this._nextProbe$3(index, probeCount, this._capacity);
    }
  },
  _checkCapacity$0: function() {
    var freeCount, t1;
    freeCount = $.$sub$n(this._capacity, this._entryCount);
    t1 = $.getInterceptor$n(freeCount);
    if ($.$lt$n(t1.$mul(freeCount, 4), this._capacity) === true || t1.$lt(freeCount, this._deletedCount) === true)
      this._grow$1(this._entryCount - this._deletedCount);
  },
  _grow$1: function(contentCount) {
    var capacity, minCapacity, oldTable;
    capacity = this._capacity;
    if (typeof capacity !== "number")
      return this._grow$1$bailout(1, contentCount, capacity);
    minCapacity = contentCount * 2;
    for (; capacity < minCapacity;)
      capacity *= 2;
    oldTable = this._table;
    this._table = this._createTable$1(capacity);
    this._capacity = capacity;
    this._entryCount = 0;
    this._deletedCount = 0;
    this._addAllEntries$1(oldTable);
    this._recordModification$0();
  },
  _grow$1$bailout: function(state0, contentCount, capacity) {
    var minCapacity, t1, oldTable;
    minCapacity = contentCount * 2;
    for (; t1 = $.getInterceptor$n(capacity), t1.$lt(capacity, minCapacity) === true;)
      capacity = t1.$mul(capacity, 2);
    oldTable = this._table;
    this._table = this._createTable$1(capacity);
    this._capacity = capacity;
    this._entryCount = 0;
    this._deletedCount = 0;
    this._addAllEntries$1(oldTable);
    this._recordModification$0();
  },
  _addAllEntries$1: function(oldTable) {
    var t1, i, object;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !oldTable.$isJavaScriptIndexingBehavior())
      return this._addAllEntries$1$bailout(1, oldTable);
    for (t1 = oldTable.length, i = 0; i < t1; i += this.get$_entrySize()) {
      if (i < 0)
        throw $.ioore(i);
      object = oldTable[i];
      if (!(object == null || object === $.CONSTANT1))
        this._copyEntry$3(oldTable, i, this._put$1(object));
    }
  },
  _addAllEntries$1$bailout: function(state0, oldTable) {
    var t1, i, object;
    for (t1 = $.getInterceptor$asx(oldTable), i = 0; i < t1.get$length(oldTable); i += this.get$_entrySize()) {
      object = t1.$index(oldTable, i);
      if (!(object == null || object === $.CONSTANT1))
        this._copyEntry$3(oldTable, i, this._put$1(object));
    }
  },
  _copyEntry$3: function(fromTable, fromOffset, toOffset) {
  },
  _get$1: function(key) {
    return this._probeForLookup$2($.get$hashCode$(key), key);
  },
  _put$1: function(key) {
    var offset, t1, oldEntry;
    offset = this._probeForAdd$2($.get$hashCode$(key), key);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout(1, key, t1, offset);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    oldEntry = t1[offset];
    if (oldEntry == null)
      this._entryCount = this._entryCount + 1;
    else if (oldEntry === $.CONSTANT1)
      this._deletedCount = this._deletedCount - 1;
    else
      return offset;
    if (key == null)
      key = $.CONSTANT2;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout(2, key, t1, offset);
    if (offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    this._recordModification$0();
    return offset;
  },
  _put$1$bailout: function(state0, key, t1, offset) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2($.get$hashCode$(key), key);
        t1 = this._table;
      case 1:
        state0 = 0;
        oldEntry = $.$index$asx(t1, offset);
        if (oldEntry == null)
          this._entryCount = this._entryCount + 1;
        else if (oldEntry === $.CONSTANT1)
          this._deletedCount = this._deletedCount - 1;
        else
          return offset;
        if (key == null)
          key = $.CONSTANT2;
        t1 = this._table;
      case 2:
        var oldEntry;
        state0 = 0;
        $.$indexSet$ax(t1, offset, key);
        this._recordModification$0();
        return offset;
    }
  },
  _remove$1: function(key) {
    var offset = this._probeForLookup$2($.get$hashCode$(key), key);
    if ($.$ge$n(offset, 0))
      this._deleteEntry$1(offset);
    return offset;
  },
  _deleteEntry$1: function(offset) {
    var key = $.CONSTANT1;
    $.$indexSet$ax(this._table, offset, key);
    this._deletedCount = this._deletedCount + 1;
    this._recordModification$0();
  },
  _HashTable$1: function(initialCapacity) {
    this._table = this._createTable$1(initialCapacity);
  }
};

$$._HashTableIterable = {"": "Iterable;_hashTable<",
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  forEach$1: function(_, action) {
    var t1, entrySize, table, modificationCount, t2, offset, entry;
    t1 = this._hashTable;
    entrySize = t1.get$_entrySize();
    table = t1._table;
    if (typeof table !== "object" || table === null || (table.constructor !== Array || !!table.immutable$list) && !table.$isJavaScriptIndexingBehavior())
      return this.forEach$1$bailout1(1, action, entrySize, t1, table);
    modificationCount = t1._modificationCount;
    for (t2 = table.length, offset = 0; offset < t2; offset += entrySize) {
      if (offset < 0)
        throw $.ioore(offset);
      entry = table[offset];
      if (!t1._isFree$1(entry))
        action.call$1(this._valueAt$2(offset, entry));
      t1._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout1: function(state0, action, entrySize, t1, table) {
    var modificationCount, t2, offset, entry;
    modificationCount = t1._modificationCount;
    for (t2 = $.getInterceptor$asx(table), offset = 0; offset < t2.get$length(table); offset += entrySize) {
      entry = t2.$index(table, offset);
      if (!t1._isFree$1(entry))
        action.call$1(this._valueAt$2(offset, entry));
      t1._checkModification$1(modificationCount);
    }
  }
};

$$._HashTableIterator = {"": "Object;_hashTable<",
  moveNext$0: function() {
    var t1, table, entrySize, t2, t3, entry;
    t1 = this._hashTable;
    t1._checkModification$1(this._modificationCount);
    table = t1._table;
    if (typeof table !== "object" || table === null || (table.constructor !== Array || !!table.immutable$list) && !table.$isJavaScriptIndexingBehavior())
      return this.moveNext$0$bailout(1, table, t1);
    entrySize = t1.get$_entrySize();
    for (t2 = table.length; t3 = this._offset, t3 < t2;) {
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      entry = table[t3];
      this._offset = t3 + entrySize;
      if (!t1._isFree$1(entry)) {
        this._liblib2$_current = this._valueAt$2(t3, entry);
        return true;
      }
    }
    this._liblib2$_current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, table, t1) {
    var entrySize, t2, currentOffset, entry;
    entrySize = t1.get$_entrySize();
    for (t2 = $.getInterceptor$asx(table); this._offset < t2.get$length(table);) {
      currentOffset = this._offset;
      entry = t2.$index(table, currentOffset);
      this._offset = currentOffset + entrySize;
      if (!t1._isFree$1(entry)) {
        this._liblib2$_current = this._valueAt$2(currentOffset, entry);
        return true;
      }
    }
    this._liblib2$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib2$_current;
  }
};

$$._HashTableKeyIterable = {"": "_HashTableIterable;_hashTable",
  get$iterator: function(_) {
    return $._HashTableKeyIterator$(this._hashTable);
  },
  _valueAt$2: function(offset, key) {
    if (key === $.CONSTANT2)
      return;
    return key;
  }
};

$$._HashTableKeyIterator = {"": "_HashTableIterator;_hashTable,_modificationCount,_offset,_liblib2$_current",
  _valueAt$2: function(offset, key) {
    if (key === $.CONSTANT2)
      return;
    return key;
  }
};

$$._HashTableValueIterable = {"": "_HashTableIterable;_entryIndex,_hashTable",
  get$iterator: function(_) {
    return $._HashTableValueIterator$(this._hashTable, this._entryIndex);
  },
  _valueAt$2: function(offset, key) {
    var t1, t3;
    t1 = this._hashTable._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._valueAt$2$bailout1(1, offset, t1);
    t3 = offset + this._entryIndex;
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _valueAt$2$bailout1: function(state0, offset, t1) {
    return $.$index$asx(t1, offset + this._entryIndex);
  }
};

$$._HashTableValueIterator = {"": "_HashTableIterator;_entryIndex,_hashTable,_modificationCount,_offset,_liblib2$_current",
  _valueAt$2: function(offset, key) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._valueAt$2$bailout1(1, offset);
    t1 = this._hashTable._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._valueAt$2$bailout1(2, offset, t1);
    t3 = offset + this._entryIndex;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _valueAt$2$bailout1: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._hashTable._table;
      case 2:
        state0 = 0;
        return $.$index$asx(t1, $.$add$ns(offset, this._entryIndex));
    }
  }
};

$$._LinkedHashMapTable = {"": "_LinkedHashTable;_table,_capacity,_entryCount,_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 4;
  },
  _value$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._value$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._value$1$bailout(2, offset, t1);
    t3 = offset + 3;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _value$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$index$asx(t1, $.$add$ns(offset, 3));
    }
  },
  _setValue$2: function(offset, value) {
    $.$indexSet$ax(this._table, $.$add$ns(offset, 3), value);
  },
  _copyEntry$3: function(oldTable, fromOffset, toOffset) {
    var t1, t3, t4;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !oldTable.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    if (typeof fromOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    if (typeof toOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(2, oldTable, fromOffset, toOffset, t1);
    t3 = toOffset + 3;
    t4 = fromOffset + 3;
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= oldTable.length)
      throw $.ioore(t4);
    t4 = oldTable[t4];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = t4;
  },
  _copyEntry$3$bailout1: function(state0, oldTable, fromOffset, toOffset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        $.$indexSet$ax(t1, $.$add$ns(toOffset, 3), $.$index$asx(oldTable, $.$add$ns(fromOffset, 3)));
    }
  }
};

$$.LinkedHashMap = {"": "Object;_hashTable<",
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.LinkedHashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var t1, offset;
    t1 = this._hashTable;
    offset = t1._get$1(key);
    if ($.$ge$n(offset, 0))
      return t1._value$1(offset);
    return;
  },
  $indexSet: function(_, key, value) {
    var t1 = this._hashTable;
    t1._setValue$2(t1._put$1(key), value);
    t1._checkCapacity$0();
  },
  forEach$1: function(_, action) {
    var t1, modificationCount, offset;
    t1 = this._hashTable;
    modificationCount = t1._modificationCount;
    offset = t1._next$1(0);
    if (typeof offset !== "number")
      return this.forEach$1$bailout(1, action, t1, modificationCount, offset);
    for (; !$.$eq(offset, 0); offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout: function(state0, action, t1, modificationCount, offset) {
    for (; $.$eq(offset, 0) !== true; offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  get$keys: function() {
    return $._LinkedHashTableKeyIterable$(this._hashTable);
  },
  get$values: function(_) {
    return $._LinkedHashTableValueIterable$(this._hashTable, 3);
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  toString$0: function(_) {
    return $.ToString_mapToString(this);
  },
  LinkedHashMap$0: function() {
    this._hashTable._container = this;
  },
  $isMap: true
};

$$.LinkedHashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1, offset;
    t1 = this.this_0;
    offset = t1.get$_hashTable()._put$1(key);
    t1.get$_hashTable()._setValue$2(offset, value);
    t1.get$_hashTable()._checkCapacity$0();
  }
};

$$._LinkedHashTableHeadMarker = {"": "Object;"};

$$._LinkedHashTable = {"": "_HashTable;",
  get$_entrySize: function() {
    return 3;
  },
  _createTable$1: function(capacity) {
    var result, t1;
    result = $.List_List($.$mul$n(capacity, this.get$_entrySize()));
    t1 = result.length;
    if (0 >= t1)
      throw $.ioore(0);
    result[0] = $.CONSTANT3;
    if (1 >= t1)
      throw $.ioore(1);
    result[1] = 0;
    if (2 >= t1)
      throw $.ioore(2);
    result[2] = 0;
    return result;
  },
  _next$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._next$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._next$1$bailout(2, offset, t1);
    t3 = offset + 1;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _next$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$index$asx(t1, $.$add$ns(offset, 1));
    }
  },
  _linkLast$1: function(offset) {
    var last, t1;
    last = $.$index$asx(this._table, 2);
    t1 = $.getInterceptor$ns(offset);
    $.$indexSet$ax(this._table, t1.$add(offset, 1), 0);
    $.$indexSet$ax(this._table, t1.$add(offset, 2), last);
    $.$indexSet$ax(this._table, $.$add$ns(last, 1), offset);
    $.$indexSet$ax(this._table, 2, offset);
  },
  _unlink$1: function(offset) {
    var t1, next, prev;
    t1 = $.getInterceptor$ns(offset);
    next = $.$index$asx(this._table, t1.$add(offset, 1));
    prev = $.$index$asx(this._table, t1.$add(offset, 2));
    $.$indexSet$ax(this._table, t1.$add(offset, 1), null);
    $.$indexSet$ax(this._table, t1.$add(offset, 2), null);
    $.$indexSet$ax(this._table, $.$add$ns(prev, 1), next);
    $.$indexSet$ax(this._table, $.$add$ns(next, 2), prev);
  },
  _addAllEntries$1: function(oldTable) {
    var t1, offset, object, t2, nextOffset;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !oldTable.$isJavaScriptIndexingBehavior())
      return this._addAllEntries$1$bailout1(1, oldTable);
    t1 = oldTable.length;
    if (1 >= t1)
      throw $.ioore(1);
    offset = oldTable[1];
    if (typeof offset !== "number")
      return this._addAllEntries$1$bailout1(2, oldTable, offset, $.JSArray_methods);
    for (; !$.$eq(offset, 0); offset = nextOffset) {
      if (offset !== (offset | 0))
        throw $.iae(offset);
      if (offset < 0 || offset >= t1)
        throw $.ioore(offset);
      object = oldTable[offset];
      t2 = offset + 1;
      if (t2 >= t1)
        throw $.ioore(t2);
      nextOffset = oldTable[t2];
      this._copyEntry$3(oldTable, offset, this._put$1(object));
    }
  },
  _addAllEntries$1$bailout1: function(state0, oldTable, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$asx(oldTable);
        offset = t1.$index(oldTable, 1);
      case 2:
        var t2, object, nextOffset;
        state0 = 0;
        for (; t2 = $.getInterceptor(offset), t2.$eq(offset, 0) !== true; offset = nextOffset) {
          object = t1.$index(oldTable, offset);
          nextOffset = t1.$index(oldTable, t2.$add(offset, 1));
          this._copyEntry$3(oldTable, offset, this._put$1(object));
        }
    }
  },
  _put$1: function(key) {
    var offset, t1, oldEntry;
    offset = this._probeForAdd$2($.get$hashCode$(key), key);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout1(1, key, t1, offset);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    oldEntry = t1[offset];
    if (oldEntry === $.CONSTANT1)
      this._deletedCount = this._deletedCount - 1;
    else if (oldEntry == null)
      this._entryCount = this._entryCount + 1;
    else
      return offset;
    this._recordModification$0();
    if (key == null)
      key = $.CONSTANT2;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
      return this._put$1$bailout1(2, key, t1, offset);
    if (offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    this._linkLast$1(offset);
    return offset;
  },
  _put$1$bailout1: function(state0, key, t1, offset) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2($.get$hashCode$(key), key);
        t1 = this._table;
      case 1:
        state0 = 0;
        oldEntry = $.$index$asx(t1, offset);
        if (oldEntry === $.CONSTANT1)
          this._deletedCount = this._deletedCount - 1;
        else if (oldEntry == null)
          this._entryCount = this._entryCount + 1;
        else
          return offset;
        this._recordModification$0();
        if (key == null)
          key = $.CONSTANT2;
        t1 = this._table;
      case 2:
        var oldEntry;
        state0 = 0;
        $.$indexSet$ax(t1, offset, key);
        this._linkLast$1(offset);
        return offset;
    }
  },
  _deleteEntry$1: function(offset) {
    var key;
    this._unlink$1(offset);
    key = $.CONSTANT1;
    $.$indexSet$ax(this._table, offset, key);
    this._deletedCount = this._deletedCount + 1;
    this._recordModification$0();
  }
};

$$._LinkedHashTableKeyIterable = {"": "Iterable;_table",
  get$iterator: function(_) {
    return $._LinkedHashTableKeyIterator$(this._table);
  },
  get$length: function(_) {
    return this._table.get$_elementCount();
  }
};

$$._LinkedHashTableKeyIterator = {"": "_LinkedHashTableIterator;_hashTable,_modificationCount,_offset,_liblib2$_current",
  _getCurrent$1: function(offset) {
    return this._hashTable._key$1(offset);
  }
};

$$._LinkedHashTableValueIterable = {"": "Iterable;_hashTable<,_valueIndex",
  get$iterator: function(_) {
    return $._LinkedHashTableValueIterator$(this._hashTable, this._valueIndex);
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  }
};

$$._LinkedHashTableValueIterator = {"": "_LinkedHashTableIterator;_valueIndex,_hashTable,_modificationCount,_offset,_liblib2$_current",
  _getCurrent$1: function(offset) {
    return $.$index$asx(this._hashTable._table, $.$add$ns(offset, this._valueIndex));
  }
};

$$._LinkedHashTableIterator = {"": "Object;_hashTable<",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._hashTable;
    t1._checkModification$1(this._modificationCount);
    t2 = this._offset;
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(1, t1, t2);
    if (t2 === 0) {
      this._liblib2$_current = null;
      return false;
    }
    this._liblib2$_current = this._getCurrent$1(t2);
    this._offset = t1._next$1(this._offset);
    return true;
  },
  moveNext$0$bailout: function(state0, t1, t2) {
    if ($.$eq(t2, 0) === true) {
      this._liblib2$_current = null;
      return false;
    }
    this._liblib2$_current = this._getCurrent$1(this._offset);
    this._offset = t1._next$1(this._offset);
    return true;
  },
  get$current: function() {
    return this._liblib2$_current;
  }
};

$$.ListQueue = {"": "Collection;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return $._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, i0, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i0 = (i + 1 & this._table.length - 1) >>> 0, i = i0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      this._checkModification$1(modificationCount);
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    return $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1);
  },
  toList$1$growable: function(_, growable) {
    var t1, list;
    if (growable) {
      t1 = this.get$length(this);
      list = $.List_List($);
      $.JSArray_methods.set$length(list, t1);
    } else
      list = $.List_List(this.get$length(this));
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(this, element);
  },
  addAll$1: function(_, elements) {
    var addCount, $length, t1, t2, t3, endSpace, preSpace;
    if (typeof elements === "object" && elements !== null && (elements.constructor === Array || elements.$isList())) {
      addCount = $.get$length$asx(elements);
      $length = this.get$length(this);
      t1 = $length + addCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3) {
        this._preGrow$1(t1);
        $.JSArray_methods.setRange$4(this._table, $length, addCount, elements, 0);
        this._tail = $.$add$ns(this._tail, addCount);
      } else {
        t1 = this._tail;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        endSpace = t3 - t1;
        if (addCount < endSpace) {
          $.JSArray_methods.setRange$4(t2, t1, addCount, elements, 0);
          this._tail = $.$add$ns(this._tail, addCount);
        } else {
          preSpace = addCount - endSpace;
          $.JSArray_methods.setRange$4(t2, t1, endSpace, elements, 0);
          $.JSArray_methods.setRange$4(this._table, 0, preSpace, elements, endSpace);
          this._tail = preSpace;
        }
      }
      this._modificationCount = this._modificationCount + 1;
    } else
      for (t1 = $.get$iterator$ax(elements); t1.moveNext$0();)
        this._add$1(this, t1.get$current());
  },
  toString$0: function(_) {
    return $.ToString_collectionToString(this);
  },
  addLast$1: function(_, element) {
    this._add$1(this, element);
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.$$throw($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw $.$$throw($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    this._tail = $.$and$n($.$sub$n(this._tail, 1), this._table.length - 1);
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _checkModification$1: function(expectedModificationCount) {
    if (typeof expectedModificationCount !== "number")
      return this._checkModification$1$bailout(1, expectedModificationCount);
    if (expectedModificationCount !== this._modificationCount)
      throw $.$$throw($.ConcurrentModificationError$(this));
  },
  _checkModification$1$bailout: function(state0, expectedModificationCount) {
    if ($.$eq(expectedModificationCount, this._modificationCount) !== true)
      throw $.$$throw($.ConcurrentModificationError$(this));
  },
  _add$1: function(_, element) {
    var t1, t2;
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = $.$and$n(t2 + 1, this._table.length - 1);
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    $.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
    $.JSArray_methods.setRange$4(newTable, split, this._head, this._table, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, $length, firstPartSize;
    t1 = $.JSInt_methods.$le(this._head, this._tail);
    t2 = this._head;
    if (t1) {
      $length = $.$sub$n(this._tail, t2);
      $.JSArray_methods.setRange$4(target, 0, $length, this._table, this._head);
      return $length;
    } else {
      t1 = this._table;
      firstPartSize = t1.length - t2;
      $.JSArray_methods.setRange$4(target, 0, firstPartSize, t1, t2);
      $.JSArray_methods.setRange$4(target, firstPartSize, this._tail, this._table, 0);
      return $.$add$ns(this._tail, firstPartSize);
    }
  },
  _preGrow$1: function(newElementCount) {
    var newTable = $.List_List($.ListQueue__nextPowerOf2(newElementCount));
    this._tail = this._writeToList$1(newTable);
    this._table = newTable;
    this._head = 0;
  },
  ListQueue$1: function(initialCapacity) {
    if (initialCapacity == null || $.JSNull_methods.$lt(initialCapacity, 8))
      initialCapacity = 8;
    else if (!$.ListQueue__isPowerOf2(initialCapacity))
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    this._table = $.List_List(initialCapacity);
  },
  $asCollection: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  }
};

$$._ListQueueIterator = {"": "Object;_queue,_end,_modificationCount,_liblib2$_position,_liblib2$_current",
  get$current: function() {
    return this._liblib2$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    t1._checkModification$1(this._modificationCount);
    t2 = this._liblib2$_position;
    if (t2 === this._end) {
      this._liblib2$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib2$_current = t3[t2];
    this._liblib2$_position = (this._liblib2$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  }
};

$$.Collection = {"": "Iterable;",
  addAll$1: function(_, elements) {
    var t1;
    for (t1 = $.get$iterator$ax(elements); t1.moveNext$0();)
      this.add$1(this, t1.get$current());
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  }
};

$$.DateTime = {"": "Object;millisecondsSinceEpoch<,isUtc",
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isDateTime))
      return false;
    return $.$eq(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch) === true && $.$eq(this.isUtc, other.isUtc) === true;
  },
  $lt: function(_, other) {
    return $.$lt$n(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  $gt: function(_, other) {
    return $.$gt$n(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  $ge: function(_, other) {
    return $.$ge$n(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, t2, t3, y, m, d, h, min, sec, ms;
    t1 = new $.DateTime_toString_fourDigits();
    t2 = new $.DateTime_toString_threeDigits();
    t3 = new $.DateTime_toString_twoDigits();
    y = t1.call$1(this.get$year());
    m = t3.call$1(this.get$month());
    d = t3.call$1(this.get$day());
    h = t3.call$1(this.get$hour());
    min = t3.call$1(this.get$minute());
    sec = t3.call$1(this.get$second());
    ms = t2.call$1(this.get$millisecond());
    if (this.isUtc === true)
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms) + "Z";
    else
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms);
  },
  add$1: function(_, duration) {
    return $.DateTime$fromMillisecondsSinceEpoch($.$add$ns(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
  },
  get$year: function() {
    return $.Primitives_getYear(this);
  },
  get$month: function() {
    return $.Primitives_getMonth(this);
  },
  get$day: function() {
    return $.Primitives_getDay(this);
  },
  get$hour: function() {
    return $.Primitives_getHours(this);
  },
  get$minute: function() {
    return $.Primitives_getMinutes(this);
  },
  get$second: function() {
    return $.Primitives_getSeconds(this);
  },
  get$millisecond: function() {
    return $.Primitives_getMilliseconds(this);
  },
  DateTime$_now$0: function() {
    $.Primitives_lazyAsJsDate(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if ($.abs$0$n(millisecondsSinceEpoch) > 8640000000000000)
      throw $.$$throw($.ArgumentError$(millisecondsSinceEpoch));
    if (isUtc == null)
      throw $.$$throw($.ArgumentError$(isUtc));
  },
  $isDateTime: true
};

$$.DateTime_toString_fourDigits = {"": "Closure;",
  call$1: function(n) {
    var t1, absN, sign;
    t1 = $.getInterceptor$n(n);
    absN = t1.abs$0(n);
    sign = t1.$lt(n, 0) === true ? "-" : "";
    if (absN >= 1000)
      return $.S(n);
    if (absN >= 100)
      return sign + "0" + $.S(absN);
    if (absN >= 10)
      return sign + "00" + $.S(absN);
    return sign + "000" + $.S(absN);
  }
};

$$.DateTime_toString_threeDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100) === true)
      return $.S(n);
    if (t1.$ge(n, 10) === true)
      return "0" + $.S(n);
    return "00" + $.S(n);
  }
};

$$.DateTime_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  }
};

$$.Duration = {"": "Object;_duration<",
  $add: function(_, other) {
    return $.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return $.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw $.iae(factor);
    return $.Duration$(0, 0, this._duration * factor, 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  get$inHours: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 3600000000);
  },
  get$inMinutes: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 60000000);
  },
  get$inSeconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000000);
  },
  get$inMilliseconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  get$inMicroseconds: function() {
    return this._duration;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isDuration))
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return $.JSNumber_methods.get$hashCode(this._duration);
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_sixDigits();
    t2 = new $.Duration_toString_twoDigits();
    if (this.get$inMicroseconds() < 0)
      return "-" + $.S($.Duration$(0, 0, -this.get$inMicroseconds(), 0, 0, 0));
    twoDigitMinutes = t2.call$1($.JSNumber_methods.remainder$1(this.get$inMinutes(), 60));
    twoDigitSeconds = t2.call$1($.JSNumber_methods.remainder$1(this.get$inSeconds(), 60));
    sixDigitUs = t1.call$1($.JSNumber_methods.remainder$1(this.get$inMicroseconds(), 1000000));
    return $.S(this.get$inHours()) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
};

$$.Duration_toString_sixDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000) === true)
      return $.S(n);
    if (t1.$ge(n, 10000) === true)
      return "0" + $.S(n);
    if (t1.$ge(n, 1000) === true)
      return "00" + $.S(n);
    if (t1.$ge(n, 100) === true)
      return "000" + $.S(n);
    if (t1.$gt(n, 10) === true)
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  }
};

$$.Duration_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  }
};

$$.NullThrownError = {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    for (; $.$lt$n(t1.i_1, t2.length) === true; t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if ($.$gt$n(t1.i_1, 0) === true)
        t1.sb_0.write$1(", ");
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t3.write$1($.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    t2.forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (t2 == null)
      return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
    else {
      t3 = t1.sb_0;
      actualParameters = t3.toString$0(t3);
      t1.sb_0 = $.StringBuffer$("");
      for (i = 0; $.JSNumber_methods.$lt(i, $.JSNull_methods.get$length(t2)); ++i) {
        if (i > 0)
          t1.sb_0.write$1(", ");
        t1.sb_0.write$1($.JSNull_methods.$index(t2, i));
      }
      t1 = t1.sb_0;
      formalParameters = t1.toString$0(t1);
      t1 = this._memberName;
      return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + actualParameters + ")\n" + "Found: " + $.S(t1) + "(" + formalParameters + ")";
    }
  }
};

$$.UnsupportedError = {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
};

$$.UnimplementedError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.Iterable = {"": "Object;",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  }
};

$$.Object = {"": ";",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(receiver)) + "'";
  }
};

$$.StringBuffer = {"": "Object;_contents",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    var str;
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    str = obj;
    this._contents = this._contents + str;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeln$1: function(obj) {
    this.write$1(obj);
    this.write$1("\n");
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
};

$$.MutationObserver_observe_override = {"": "Closure;parsedOptions_0",
  call$2: function(key, value) {
    if (value != null)
      this.parsedOptions_0[key] = value;
  }
};

$$._EventStream = {"": "Stream;_target,_eventType,_useCapture",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture);
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  }
};

$$._EventStreamSubscription = {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  get$_paused: function() {
    return this._pauseCount > 0;
  },
  _tryResume$0: function() {
    if (this._onData != null && !this.get$_paused())
      $.$$dom_addEventListener$3$x(this._target, this._eventType, this._onData, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture) {
    this._tryResume$0();
  }
};

$$.EventStreamProvider = {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$.Rect = {"": "Object;left,top,width>,height>",
  toString$0: function(_) {
    return "(" + $.S(this.left) + ", " + $.S(this.top) + ", " + $.S(this.width) + ", " + $.S(this.height) + ")";
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!other.$isRect))
      return false;
    return $.$eq(this.left, other.left) === true && $.$eq(this.top, other.top) === true && $.$eq(this.width, other.width) === true && $.$eq(this.height, other.height) === true;
  },
  round$0: function(_) {
    return $.Rect$($.round$0$n(this.left), $.round$0$n(this.top), $.round$0$n(this.width), $.round$0$n(this.height));
  },
  toInt$0: function(_) {
    return $.Rect$($.toInt$0$n(this.left), $.toInt$0$n(this.top), $.toInt$0$n(this.width), $.toInt$0$n(this.height));
  },
  $isRect: true
};

$$._MicrotaskScheduler = {"": "Object;",
  _callback$0: function() {
    return this._callback.call$0();
  },
  maybeSchedule$0: function() {
    if (this._nextMicrotaskFrameScheduled)
      return;
    this._nextMicrotaskFrameScheduled = true;
    this._schedule$0();
  },
  _onCallback$0: function() {
    if (!this._nextMicrotaskFrameScheduled)
      return;
    this._nextMicrotaskFrameScheduled = false;
    this._callback$0();
  }
};

$$._PostMessageScheduler = {"": "_MicrotaskScheduler;_MICROTASK_MESSAGE,_nextMicrotaskFrameScheduled,_callback",
  _schedule$0: function() {
    $.postMessage$2$x(window, this._MICROTASK_MESSAGE, "*");
  },
  _handleMessage$1: function(e) {
    this._onCallback$0();
  },
  get$_handleMessage: function() {
    return new $.BoundClosure$1(this, "_handleMessage$1");
  },
  _PostMessageScheduler$1: function(callback) {
    $.get$onMessage$x($.window()).listen$1(this.get$_handleMessage());
  }
};

$$._MutationObserverScheduler = {"": "_MicrotaskScheduler;_observer,_dummy,_nextMicrotaskFrameScheduled,_callback",
  _schedule$0: function() {
    var t1 = this._dummy;
    $.getInterceptor$x(t1).hidden = t1.hidden !== true;
  },
  _handleMutation$2: function(mutations, observer) {
    this._onCallback$0();
  },
  get$_handleMutation: function() {
    return new $.BoundClosure$2(this, "_handleMutation$2");
  },
  _MutationObserverScheduler$1: function(callback) {
    this._observer = $.MutationObserver_MutationObserver(this.get$_handleMutation());
    this._dummy = $.DivElement_DivElement();
    $.observe$2$attributes$x(this._observer, this._dummy, true);
  }
};

$$._SetImmediateScheduler = {"": "_MicrotaskScheduler;_nextMicrotaskFrameScheduled,_callback",
  _schedule$0: function() {
    $._setImmediate$1$x(window, this.get$_handleImmediate());
  },
  _handleImmediate$0: function() {
    this._onCallback$0();
  },
  get$_handleImmediate: function() {
    return new $.BoundClosure$0(this, "_handleImmediate$0");
  }
};

$$.FixedSizeListIterator = {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = this._position + 1;
    t1 = this._length;
    if (nextPosition < t1) {
      this._current = $.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._current;
  }
};

$$.convertDartToNative_Dictionary_anon = {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  }
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": "Closure;values_1,copies_2",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_1;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_2.push(null);
    return $length;
  }
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": "Closure;copies_3",
  call$1: function(i) {
    var t1 = this.copies_3;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  }
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": "Closure;copies_4",
  call$2: function(i, x) {
    var t1 = this.copies_4;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  }
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": "Closure;",
  call$0: function() {
  }
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": "Closure;findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var t1, slot, t2, $length, copy, t3, i, element, elementCopy, copy0, j, t4;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (typeof e === "object" && e !== null && !!e.$isDateTime)
      throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
    if (typeof e === "object" && e !== null && !!e.$isRegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (typeof e === "object" && e !== null && e.$isArrayBufferView())
      return e;
    if (typeof e === "object" && e !== null && !!e.$isMap) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t2 = t1.copy_0;
      if (t2 != null)
        return t2;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      e.forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || e.$isList())) {
      if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(1, e);
      $length = e.length;
      slot = this.findSlot_5.call$1(e);
      t2 = this.readSlot_6;
      copy = t2.call$1(slot);
      if (copy != null) {
        if (true === copy) {
          copy = new Array($length);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      t1 = e instanceof Array && !!!(e.immutable$list);
      t3 = this.writeSlot_7;
      if (t1) {
        t3.call$2(slot, true);
        for (i = 0; i < $length; ++i) {
          if (i >= e.length)
            throw $.ioore(i);
          element = e[i];
          elementCopy = this.call$1(element);
          if (elementCopy == null ? element != null : elementCopy !== element) {
            copy0 = t2.call$1(slot);
            if (true === copy0) {
              copy0 = new Array($length);
              t3.call$2(slot, copy0);
            }
            if (typeof copy0 !== "object" || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !copy0.$isJavaScriptIndexingBehavior())
              return this.call$1$bailout(2, e, t3, elementCopy, $.JSArray_methods, copy0, $length, slot, t2, copy, i);
            for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
              if (j >= t1)
                throw $.ioore(j);
              t4 = e[j];
              if (j >= t2)
                throw $.ioore(j);
              copy0[j] = t4;
            }
            if (i >= t2)
              throw $.ioore(i);
            copy0[i] = elementCopy;
            ++i;
            copy = copy0;
            break;
          }
        }
        if (copy == null) {
          t3.call$2(slot, e);
          copy = e;
        }
      } else {
        copy = new Array($length);
        t3.call$2(slot, copy);
        i = 0;
      }
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(3, e, 0, 0, $.JSArray_methods, 0, $length, 0, 0, copy, i);
      for (; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    throw $.$$throw($.UnimplementedError$("structured clone of other type"));
  },
  call$1$bailout: function(state0, e, t4, elementCopy, t2, copy0, $length, slot, t3, copy, i) {
    switch (state0) {
      case 0:
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (typeof e === "object" && e !== null && !!e.$isDateTime)
          throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
        if (typeof e === "object" && e !== null && !!e.$isRegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
        if (typeof e === "object" && e !== null && e.$isArrayBufferView())
          return e;
        if (typeof e === "object" && e !== null && !!e.$isMap) {
          slot = this.findSlot_5.call$1(e);
          t1.copy_0 = this.readSlot_6.call$1(slot);
          t2 = t1.copy_0;
          if (t2 != null)
            return t2;
          t1.copy_0 = {};
          this.writeSlot_7.call$2(slot, t1.copy_0);
          e.forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
          return t1.copy_0;
        }
      default:
        var t1, element, j;
        if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === "object" && e !== null && (e.constructor === Array || e.$isList()))
          switch (state0) {
            case 0:
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$asx(e);
              $length = t2.get$length(e);
              slot = this.findSlot_5.call$1(e);
              t3 = this.readSlot_6;
              copy = t3.call$1(slot);
              if (copy != null) {
                if (true === copy) {
                  copy = new Array($length);
                  this.writeSlot_7.call$2(slot, copy);
                }
                return copy;
              }
              t1 = e instanceof Array && !!!(e.immutable$list);
              t4 = this.writeSlot_7;
            case 2:
              if (state0 === 2 || state0 === 0 && t1)
                switch (state0) {
                  case 0:
                    t4.call$2(slot, true);
                    i = 0;
                  case 2:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!(i < $length))
                              break L0;
                            element = t2.$index(e, i);
                            elementCopy = this.call$1(element);
                          case 2:
                            if (state0 === 2 || state0 === 0 && (elementCopy == null ? element != null : elementCopy !== element))
                              switch (state0) {
                                case 0:
                                  copy0 = t3.call$1(slot);
                                  if (true === copy0) {
                                    copy0 = new Array($length);
                                    t4.call$2(slot, copy0);
                                  }
                                case 2:
                                  state0 = 0;
                                  for (t1 = $.getInterceptor$ax(copy0), j = 0; j < i; ++j)
                                    t1.$indexSet(copy0, j, t2.$index(e, j));
                                  t1.$indexSet(copy0, i, elementCopy);
                                  ++i;
                                  copy = copy0;
                                  break L0;
                              }
                            ++i;
                        }
                    if (copy == null) {
                      t4.call$2(slot, e);
                      copy = e;
                    }
                }
              else {
                copy = new Array($length);
                t4.call$2(slot, copy);
                i = 0;
              }
            case 3:
              state0 = 0;
              for (t1 = $.getInterceptor$ax(copy); i < $length; ++i)
                t1.$indexSet(copy, i, this.call$1(t2.$index(e, i)));
              return copy;
          }
        throw $.$$throw($.UnimplementedError$("structured clone of other type"));
    }
  }
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": "Closure;box_0,walk_8",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  }
};

$$.SimulationSystem = {"": "Object;canvas>,rng,_width@,_height@,world,renderTime",
  get$width: function(_) {
    return this._width;
  },
  get$height: function(_) {
    return this._height;
  },
  start$0: function(_) {
    $.setImmediate$1$x(window, new $.SimulationSystem_start_anon(this));
  },
  _start$0: function() {
    var t1, i, circle;
    this.world = $.VertieWorld$(this.get$width(this), this.get$height(this), 0.95, 0);
    t1 = $.VertieVector$(0, 0.5);
    this.world.gravity = t1;
    for (i = 0; i < 50; ++i) {
      circle = $.VertieCircleShape$($.VertiePoint$(this.rng.nextInt$1(this.get$width(this)), this.rng.nextInt$1(this.get$height(this))), 20);
      this.world.add_circle_shape$1(circle);
    }
    $.requestAnimationFrame$1$x(window, this.get$draw());
  },
  draw$1: function(_) {
    var time, t1, context;
    time = $.DateTime$_now().millisecondsSinceEpoch;
    t1 = this.renderTime;
    if (t1 != null) {
      t1 = $.$sub$n(time, t1);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      $.showFps($.JSDouble_methods.round$0(1000 / t1));
    }
    this.renderTime = time;
    context = $.get$context2d$x(this.canvas);
    $.clearRect$4$x(context, 0, 0, this.get$width(this), this.get$height(this));
    this.drawCircles$1(context);
    t1 = this.world;
    t1.step$0(t1);
    $.requestAnimationFrame$1$x(window, this.get$draw());
  },
  get$draw: function() {
    return new $.BoundClosure$1(this, "draw$1");
  },
  drawCircles$1: function(context) {
    var t1, t2, t3, t4;
    for (t1 = $.get$iterator$ax(this.world.circle_shapes), t2 = $.getInterceptor$x(context); t1.moveNext$0();) {
      t3 = t1.get$current();
      t2.set$lineWidth(context, 0.5);
      t2.set$fillStyle(context, "#0000FF");
      t2.set$strokeStyle(context, "#0000FF");
      t2.beginPath$0(context);
      t4 = t3.get$center();
      t2.arc$6(context, t4.x, t4.y, t3.get$radius(), 0, 6.283185307179586, false);
      t2.fill$0(context);
      t2.closePath$0(context);
      t2.stroke$0(context);
    }
  },
  SimulationSystem$1: function(canvas) {
    this.rng = $.Random_Random(null);
  }
};

$$.SimulationSystem_start_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1, t2, t3, t4;
    t1 = this.this_0;
    t2 = $.getInterceptor$x(t1);
    t1.set$_width($.get$client$x(t2.get$canvas(t1).parentElement).width);
    t1.set$_height($.get$client$x(t2.get$canvas(t1).parentElement).height);
    t3 = t1.get$_width();
    $.set$width$x(t2.get$canvas(t1), t3);
    t3 = t1.get$_height();
    $.set$height$x(t2.get$canvas(t1), t3);
    t3 = $.getInterceptor$x(t1);
    t4 = $.S(t3.get$width(t1)) + " " + $.S(t3.get$height(t1));
    $.getInterceptor$x($.query$1$x(document, "#res")).textContent = t4;
    t1._start$0();
  }
};

$$.VertiePoint = {"": "Object;x>,y>",
  distanceTo$1: function(other) {
    return Math.sqrt($.checkNum(this.squaredDistanceTo$1(other)));
  },
  squaredDistanceTo$1: function(other) {
    var dx, dy;
    dx = $.$sub$n(this.x, other.x);
    dy = $.$sub$n(this.y, other.y);
    return $.$add$ns($.$mul$n(dx, dx), $.$mul$n(dy, dy));
  }
};

$$.VertieVector = {"": "VertiePoint;x,y"};

$$.VertieCircleShape = {"": "Object;radius<,center<,prev_center<,ax@,ay@",
  accelerate$1: function(delta) {
    var t1 = this.center;
    t1.x = $.$add$ns(t1.x, $.$mul$n(this.ax, delta) * delta);
    t1 = this.center;
    t1.y = $.$add$ns(t1.y, $.$mul$n(this.ay, delta) * delta);
    this.ax = 0;
    this.ay = 0;
  },
  inertia$0: function() {
    var x, y;
    x = $.$sub$n($.$mul$n(this.center.x, 2), this.prev_center.x);
    y = $.$sub$n($.$mul$n(this.center.y, 2), this.prev_center.y);
    this.prev_center = this.center;
    this.center = $.VertiePoint$(x, y);
  },
  apply_friction$1: function(friction) {
    var x, y, t1, t2, $length;
    x = $.$sub$n(this.prev_center.x, this.center.x);
    y = $.$sub$n(this.prev_center.y, this.center.y);
    t1 = $.getInterceptor$n(x);
    t2 = $.getInterceptor$n(y);
    $length = Math.sqrt($.checkNum($.$add$ns(t1.$mul(x, x), t2.$mul(y, y))));
    if (t1.$eq(x, 0) !== true) {
      this.ax = $.$add$ns(this.ax, t1.$div(x, $length) * friction);
      if (t1.abs$0(x) < 0.04) {
        this.ax = 0;
        t1 = this.center.x;
        this.prev_center.x = t1;
      }
    }
    if (t2.$eq(y, 0) !== true) {
      this.ay = $.$add$ns(this.ay, t2.$div(y, $length) * friction);
      if (t2.abs$0(y) < 0.04) {
        this.ay = 0;
        t1 = this.center.y;
        this.prev_center.y = t1;
      }
    }
  },
  VertieCircleShape$2: function(center, radius) {
    var t1;
    this.ax = 0;
    this.ay = 0;
    t1 = this.center;
    this.prev_center = $.VertiePoint$(t1.x, t1.y);
  }
};

$$.VertieWorld = {"": "Object;circle_shapes,lines,width>,height>,damping,friction,gravity",
  collide$1: function(preserve_impulse) {
    var t1, i, t2, shape1, j, j0, shape2, t4, t6, t7, x, y, slength, $length, target, t3, t5, v1x, v1y, t11, t12, v2x, v2y, factor, t15, t16, t18, f1, f2, t8, t10;
    for (t1 = this.damping, i = 0; i < $.get$length$asx(this.circle_shapes); i = j) {
      t2 = this.circle_shapes;
      if (typeof t2 !== "object" || t2 === null || t2.constructor !== Array || !!t2.fixed$length)
        return this.collide$1$bailout(1, preserve_impulse, t1, t2, i);
      if (i >= t2.length)
        throw $.ioore(i);
      shape1 = t2[i];
      for (j = i + 1, j0 = j; j0 < $.get$length$asx(this.circle_shapes); ++j0) {
        t2 = this.circle_shapes;
        if (typeof t2 !== "object" || t2 === null || t2.constructor !== Array || !!t2.fixed$length)
          return this.collide$1$bailout(2, preserve_impulse, t1, t2, 0, shape1, j0, j);
        if (j0 >= t2.length)
          throw $.ioore(j0);
        shape2 = t2[j0];
        t2 = shape1.get$center();
        t4 = t2.x;
        if (typeof t4 !== "number")
          return this.collide$1$bailout(3, preserve_impulse, t1, t4, 0, shape1, j0, j, shape2);
        t6 = shape2.get$center();
        t7 = t6.x;
        if (typeof t7 !== "number")
          return this.collide$1$bailout(4, preserve_impulse, t1, t4, 0, shape1, j0, j, shape2, t7);
        x = t4 - t7;
        t2 = t2.y;
        if (typeof t2 !== "number")
          return this.collide$1$bailout(5, preserve_impulse, t1, 0, 0, shape1, j0, j, shape2, t2, x);
        t6 = t6.y;
        if (typeof t6 !== "number")
          return this.collide$1$bailout(6, preserve_impulse, t1, 0, 0, shape1, j0, j, shape2, t2, x, t6);
        y = t2 - t6;
        slength = x * x + y * y;
        $length = Math.sqrt($.checkNum(slength));
        target = shape1.get$radius() + shape2.get$radius();
        if ($length < target) {
          t2 = shape1.get$center();
          t3 = t2.x;
          if (typeof t3 !== "number")
            return this.collide$1$bailout(7, preserve_impulse, t1, t3, 0, shape1, j0, j, shape2, $.JSNumber_methods, x, $.JSNumber_methods, target, y, slength, $length);
          t5 = shape1.get$prev_center();
          t6 = t5.x;
          if (typeof t6 !== "number")
            return this.collide$1$bailout(8, preserve_impulse, t1, t3, 0, shape1, j0, j, shape2, $.JSNumber_methods, x, $.JSNumber_methods, target, y, slength, $length, t6);
          v1x = t3 - t6;
          t6 = t2.y;
          if (typeof t6 !== "number")
            return this.collide$1$bailout(9, preserve_impulse, t1, 0, 0, shape1, j0, j, shape2, $.JSNumber_methods, x, $.JSNumber_methods, target, y, slength, $length, t6, v1x);
          t5 = t5.y;
          if (typeof t5 !== "number")
            return this.collide$1$bailout(10, preserve_impulse, t1, 0, 0, shape1, j0, j, shape2, $.JSNumber_methods, x, $.JSNumber_methods, target, y, slength, $length, t6, v1x, t5);
          v1y = t6 - t5;
          t5 = shape2.get$center();
          t6 = t5.x;
          if (typeof t6 !== "number")
            return this.collide$1$bailout(11, preserve_impulse, t1, 0, 0, shape1, j0, j, shape2, $.JSNumber_methods, x, $.JSNumber_methods, target, y, slength, $length, 0, v1x, t6, v1y);
          t11 = shape2.get$prev_center();
          t12 = t11.x;
          if (typeof t12 !== "number")
            return this.collide$1$bailout(12, preserve_impulse, t1, 0, 0, shape1, j0, j, shape2, $.JSNumber_methods, x, $.JSNumber_methods, target, y, slength, $length, 0, v1x, t6, v1y, t12);
          v2x = t6 - t12;
          t5 = t5.y;
          if (typeof t5 !== "number")
            return this.collide$1$bailout(13, preserve_impulse, t1, 0, 0, shape1, j0, j, shape2, $.JSNumber_methods, x, $.JSNumber_methods, target, y, slength, $length, 0, v1x, 0, v1y, t5, v2x);
          t11 = t11.y;
          if (typeof t11 !== "number")
            return this.collide$1$bailout(14, preserve_impulse, t1, 0, 0, shape1, j0, j, shape2, $.JSNumber_methods, x, $.JSNumber_methods, target, y, slength, $length, 0, v1x, 0, v1y, t5, v2x, t11);
          v2y = t5 - t11;
          factor = ($length - target) / $length;
          t11 = x * factor * 0.5;
          t2.x = t3 - t11;
          t2 = shape1.get$center();
          t5 = t2.y;
          if (typeof t5 !== "number")
            return this.collide$1$bailout(16, preserve_impulse, t1, 0, 0, shape1, j0, j, shape2, $.JSNumber_methods, x, $.JSNumber_methods, 0, y, slength, 0, 0, v1x, 0, v1y, 0, v2x, t2, factor, v2y, t5);
          t15 = y * factor * 0.5;
          t2.y = t5 - t15;
          t2 = shape2.get$center();
          t16 = t2.x;
          if (typeof t16 !== "number")
            return this.collide$1$bailout(17, preserve_impulse, t1, 0, 0, shape1, j0, j, shape2, $.JSNumber_methods, x, $.JSNumber_methods, 0, y, slength, 0, 0, v1x, 0, v1y, 0, v2x, t2, factor, v2y, 0, t16);
          t2.x = t16 + t11;
          t2 = shape2.get$center();
          t18 = t2.y;
          if (typeof t18 !== "number")
            return this.collide$1$bailout(18, preserve_impulse, t1, 0, 0, shape1, j0, j, shape2, $.JSNumber_methods, x, $.JSNumber_methods, 0, y, slength, 0, 0, v1x, 0, v1y, 0, v2x, t2, factor, v2y, 0, 0, t18);
          t2.y = t18 + t15;
          if (preserve_impulse) {
            f1 = t1 * (x * v1x + y * v1y) / slength;
            f2 = t1 * (x * v2x + y * v2y) / slength;
            t2 = f2 * x;
            t3 = f1 * x;
            v1x += t2 - t3;
            v2x += t3 - t2;
            t4 = f2 * y;
            t5 = f1 * y;
            v1y += t4 - t5;
            v2y += t5 - t4;
            t6 = shape1.get$center().x;
            if (typeof t6 !== "number")
              return this.collide$1$bailout(19, preserve_impulse, t1, 0, 0, shape1, j0, j, shape2, 0, 0, 0, 0, 0, 0, 0, 0, v1x, 0, v1y, t6, v2x, 0, 0, v2y);
            shape1.get$prev_center().x = t6 - v1x;
            t8 = shape1.get$center().y;
            if (typeof t8 !== "number")
              return this.collide$1$bailout(20, preserve_impulse, t1, 0, 0, shape1, j0, j, shape2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v1y, t8, v2x, 0, 0, v2y);
            shape1.get$prev_center().y = t8 - v1y;
            t10 = shape2.get$center().x;
            if (typeof t10 !== "number")
              return this.collide$1$bailout(21, preserve_impulse, t1, 0, 0, shape1, j0, j, shape2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, v2x, 0, 0, v2y);
            shape2.get$prev_center().x = t10 - v2x;
            t12 = shape2.get$center().y;
            if (typeof t12 !== "number")
              return this.collide$1$bailout(22, preserve_impulse, t1, 0, 0, shape1, j0, j, shape2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, v2y);
            shape2.get$prev_center().y = t12 - v2y;
          }
        }
      }
    }
  },
  collide$1$bailout: function(state0, preserve_impulse, t1, t2, i, shape1, j0, j, shape2, t5, x, t7, target, y, slength, $length, t4, v1x, t8, v1y, t10, v2x, t12, factor, v2y, t15, t17, t19) {
    switch (state0) {
      case 0:
        t1 = this.damping;
        i = 0;
      default:
        var f1, t3, f2, t6, t9;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < $.get$length$asx(this.circle_shapes)))
                  break L0;
                t2 = this.circle_shapes;
              case 1:
                state0 = 0;
                shape1 = $.$index$asx(t2, i);
                j = i + 1;
                j0 = j;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!(j0 < $.get$length$asx(this.circle_shapes)))
                          break L1;
                        t2 = this.circle_shapes;
                      case 2:
                        state0 = 0;
                        shape2 = $.$index$asx(t2, j0);
                        t2 = shape1.get$center().x;
                      case 3:
                        state0 = 0;
                        t5 = shape2.get$center().x;
                      case 4:
                        state0 = 0;
                        x = $.$sub$n(t2, t5);
                        t5 = shape1.get$center().y;
                      case 5:
                        state0 = 0;
                        t7 = shape2.get$center().y;
                      case 6:
                        state0 = 0;
                        y = $.$sub$n(t5, t7);
                        t7 = $.getInterceptor$n(x);
                        t5 = $.getInterceptor$n(y);
                        slength = $.$add$ns(t7.$mul(x, x), t5.$mul(y, y));
                        $length = Math.sqrt($.checkNum(slength));
                        target = shape1.get$radius() + shape2.get$radius();
                      default:
                        if (state0 === 22 || state0 === 21 || state0 === 20 || state0 === 19 || state0 === 18 || state0 === 17 || state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 0 && $length < target)
                          switch (state0) {
                            case 0:
                              t2 = shape1.get$center().x;
                            case 7:
                              state0 = 0;
                              t4 = shape1.get$prev_center().x;
                            case 8:
                              state0 = 0;
                              v1x = $.$sub$n(t2, t4);
                              t4 = shape1.get$center().y;
                            case 9:
                              state0 = 0;
                              t8 = shape1.get$prev_center().y;
                            case 10:
                              state0 = 0;
                              v1y = $.$sub$n(t4, t8);
                              t8 = shape2.get$center().x;
                            case 11:
                              state0 = 0;
                              t10 = shape2.get$prev_center().x;
                            case 12:
                              state0 = 0;
                              v2x = $.$sub$n(t8, t10);
                              t10 = shape2.get$center().y;
                            case 13:
                              state0 = 0;
                              t12 = shape2.get$prev_center().y;
                            case 14:
                              state0 = 0;
                              v2y = $.$sub$n(t10, t12);
                              factor = ($length - target) / $length;
                              t12 = shape1.get$center();
                              t10 = t12.x;
                            case 15:
                              state0 = 0;
                              t12.x = $.$sub$n(t10, $.$mul$n(t7.$mul(x, factor), 0.5));
                              t12 = shape1.get$center();
                              t15 = t12.y;
                            case 16:
                              state0 = 0;
                              t12.y = $.$sub$n(t15, $.$mul$n(t5.$mul(y, factor), 0.5));
                              t12 = shape2.get$center();
                              t17 = t12.x;
                            case 17:
                              state0 = 0;
                              t12.x = $.$add$ns(t17, $.$mul$n(t7.$mul(x, factor), 0.5));
                              t12 = shape2.get$center();
                              t19 = t12.y;
                            case 18:
                              state0 = 0;
                              t12.y = $.$add$ns(t19, $.$mul$n(t5.$mul(y, factor), 0.5));
                            default:
                              if (state0 === 22 || state0 === 21 || state0 === 20 || state0 === 19 || state0 === 0 && preserve_impulse)
                                switch (state0) {
                                  case 0:
                                    t2 = $.$add$ns(t7.$mul(x, v1x), t5.$mul(y, v1y));
                                    if (typeof t2 !== "number")
                                      throw $.iae(t2);
                                    if (typeof slength !== "number")
                                      throw $.iae(slength);
                                    f1 = t1 * t2 / slength;
                                    t3 = $.$add$ns(t7.$mul(x, v2x), t5.$mul(y, v2y));
                                    if (typeof t3 !== "number")
                                      throw $.iae(t3);
                                    f2 = t1 * t3 / slength;
                                    if (typeof x !== "number")
                                      throw $.iae(x);
                                    t4 = f2 * x;
                                    t6 = f1 * x;
                                    v1x = $.$add$ns(v1x, t4 - t6);
                                    v2x = $.$add$ns(v2x, t6 - t4);
                                    if (typeof y !== "number")
                                      throw $.iae(y);
                                    t8 = f2 * y;
                                    t9 = f1 * y;
                                    v1y = $.$add$ns(v1y, t8 - t9);
                                    v2y = $.$add$ns(v2y, t9 - t8);
                                    t10 = shape1.get$center().x;
                                  case 19:
                                    state0 = 0;
                                    t10 = $.$sub$n(t10, v1x);
                                    shape1.get$prev_center().x = t10;
                                    t10 = shape1.get$center().y;
                                  case 20:
                                    state0 = 0;
                                    t10 = $.$sub$n(t10, v1y);
                                    shape1.get$prev_center().y = t10;
                                    t10 = shape2.get$center().x;
                                  case 21:
                                    state0 = 0;
                                    t10 = $.$sub$n(t10, v2x);
                                    shape2.get$prev_center().x = t10;
                                    t10 = shape2.get$center().y;
                                  case 22:
                                    state0 = 0;
                                    t10 = $.$sub$n(t10, v2y);
                                    shape2.get$prev_center().y = t10;
                                }
                          }
                        ++j0;
                    }
                i = j;
            }
    }
  },
  colide_with_lines$1: function(preserve_impulse) {
    var t1, t2, t3, t4, t5, contact_point, t6, t7, t8, t10, t11, t13, v1y, t16, x, y, $length, factor, t18, t9, factor_y, t12;
    for (t1 = $.get$iterator$ax(this.lines), t2 = this.damping; t1.moveNext$0();) {
      t3 = t1.get$current();
      for (t4 = $.get$iterator$ax(this.circle_shapes); t4.moveNext$0();) {
        t5 = t4.get$current();
        contact_point = t3.contact_point$1(t5);
        t6 = $.getInterceptor(contact_point);
        if (contact_point == null)
          continue;
        t7 = t5.get$center();
        t8 = t7.x;
        if (typeof t8 !== "number")
          return this.colide_with_lines$1$bailout(1, preserve_impulse, t5, t2, contact_point, t8, t6, t3, t1, t4);
        t10 = t5.get$prev_center();
        t11 = t10.x;
        if (typeof t11 !== "number")
          return this.colide_with_lines$1$bailout(2, preserve_impulse, t5, t2, contact_point, t8, t6, t3, t1, t4, t11);
        t13 = t7.y;
        if (typeof t13 !== "number")
          return this.colide_with_lines$1$bailout(3, preserve_impulse, t5, t2, contact_point, 0, t6, t3, t1, t4, 0, t13);
        t10 = t10.y;
        if (typeof t10 !== "number")
          return this.colide_with_lines$1$bailout(4, preserve_impulse, t5, t2, contact_point, 0, t6, t3, t1, t4, 0, t13, t10);
        v1y = (t13 - t10) * t2;
        t16 = t6.get$x(contact_point);
        if (typeof t16 !== "number")
          return this.colide_with_lines$1$bailout(6, preserve_impulse, t5, t2, contact_point, 0, t6, t3, t1, t4, 0, 0, 0, v1y, t8, t16);
        x = t8 - t16;
        t16 = t6.get$y(contact_point);
        if (typeof t16 !== "number")
          return this.colide_with_lines$1$bailout(8, preserve_impulse, t5, t2, contact_point, 0, t6, t3, t1, t4, 0, 0, 0, v1y, 0, t13, x, t16);
        y = t13 - t16;
        $length = contact_point.distanceTo$1(t7);
        factor = ($length - t5.get$radius()) / $length;
        t7 = t5.get$center();
        t16 = t7.x;
        if (typeof t16 !== "number")
          return this.colide_with_lines$1$bailout(9, preserve_impulse, t5, t2, contact_point, 0, t6, t3, t1, t4, 0, 0, 0, v1y, 0, t16, x, t7, y, factor);
        t7.x = t16 - x * factor;
        t7 = t5.get$center();
        t18 = t7.y;
        if (typeof t18 !== "number")
          return this.colide_with_lines$1$bailout(10, preserve_impulse, t5, t2, contact_point, 0, t6, t3, t1, t4, 0, 0, 0, v1y, 0, 0, x, t7, y, factor, $.JSNumber_methods, t18);
        t7.y = t18 - y * factor;
        if (preserve_impulse) {
          t7 = t5.get$radius();
          t8 = $.JSNumber_methods.toInt$0(x);
          t9 = $.JSNumber_methods.toInt$0(y);
          factor_y = t7 * Math.sin($.checkNum(Math.atan2($.checkNum(t8), $.checkNum(t9))));
          t5.get$radius();
          $.JSNumber_methods.toInt$0(y);
          t7 = $.JSNumber_methods.toInt$0(x);
          Math.cos($.checkNum(Math.atan2($.checkNum(y), $.checkNum(t7))));
          t10 = t6.get$y(contact_point);
          if (typeof t10 !== "number")
            return this.colide_with_lines$1$bailout(11, preserve_impulse, t5, t2, contact_point, 0, t6, t3, t1, t4, 0, 0, 0, v1y, 0, 0, 0, 0, 0, 0, 0, 0, t10, factor_y);
          t12 = t5.get$center().y;
          if (typeof t12 !== "number")
            return this.colide_with_lines$1$bailout(12, preserve_impulse, t5, t2, contact_point, 0, t6, t3, t1, t4, 0, 0, 0, v1y, 0, 0, 0, 0, 0, 0, 0, 0, t10, factor_y, t12);
          if ($.JSNumber_methods.abs$0(t10 - t12) <= t5.get$radius()) {
            t6 = t6.get$y(contact_point);
            if (typeof t6 !== "number")
              return this.colide_with_lines$1$bailout(13, preserve_impulse, t5, t2, 0, 0, t6, t3, t1, t4, 0, 0, 0, v1y, 0, 0, 0, 0, 0, 0, 0, 0, 0, factor_y);
            t5.get$prev_center().y = t6 + factor_y + v1y;
          }
        }
      }
    }
  },
  colide_with_lines$1$bailout: function(state0, preserve_impulse, t5, t2, contact_point, t7, t6, t3, t1, t4, t9, t11, t13, v1y, t15, t17, x, t19, y, factor, t22, t23, t25, factor_y, t10) {
    switch (state0) {
      case 0:
        t1 = $.get$iterator$ax(this.lines);
        t2 = this.damping;
      default:
        var $length, t8;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!t1.moveNext$0())
                  break L0;
                t3 = t1.get$current();
                t4 = $.get$iterator$ax(this.circle_shapes);
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!t4.moveNext$0())
                          break L1;
                      default:
                        c$1: {
                          switch (state0) {
                            case 0:
                              t5 = t4.get$current();
                              contact_point = t3.contact_point$1(t5);
                              t6 = $.getInterceptor(contact_point);
                              if (contact_point == null)
                                break c$1;
                              t7 = t5.get$center().x;
                            case 1:
                              state0 = 0;
                              t9 = t5.get$prev_center().x;
                            case 2:
                              state0 = 0;
                              $.$mul$n($.$sub$n(t7, t9), t2);
                              t11 = t5.get$center().y;
                            case 3:
                              state0 = 0;
                              t13 = t5.get$prev_center().y;
                            case 4:
                              state0 = 0;
                              v1y = $.$mul$n($.$sub$n(t11, t13), t2);
                              t15 = t5.get$center().x;
                            case 5:
                              state0 = 0;
                              t17 = t6.get$x(contact_point);
                            case 6:
                              state0 = 0;
                              x = $.$sub$n(t15, t17);
                              t17 = t5.get$center().y;
                            case 7:
                              state0 = 0;
                              t19 = t6.get$y(contact_point);
                            case 8:
                              state0 = 0;
                              y = $.$sub$n(t17, t19);
                              $length = contact_point.distanceTo$1(t5.get$center());
                              factor = ($length - t5.get$radius()) / $length;
                              t19 = t5.get$center();
                              t17 = t19.x;
                            case 9:
                              state0 = 0;
                              t22 = $.getInterceptor$n(x);
                              t19.x = $.$sub$n(t17, t22.$mul(x, factor));
                              t19 = t5.get$center();
                              t23 = t19.y;
                            case 10:
                              state0 = 0;
                              t25 = $.getInterceptor$n(y);
                              t19.y = $.$sub$n(t23, t25.$mul(y, factor));
                            default:
                              if (state0 === 13 || state0 === 12 || state0 === 11 || state0 === 0 && preserve_impulse)
                                switch (state0) {
                                  case 0:
                                    t7 = t5.get$radius();
                                    t8 = t22.toInt$0(x);
                                    t9 = t25.toInt$0(y);
                                    factor_y = t7 * Math.sin($.checkNum(Math.atan2($.checkNum(t8), $.checkNum(t9))));
                                    t5.get$radius();
                                    t25.toInt$0(y);
                                    t22 = t22.toInt$0(x);
                                    Math.cos($.checkNum(Math.atan2($.checkNum(y), $.checkNum(t22))));
                                    t25 = t6.get$y(contact_point);
                                  case 11:
                                    state0 = 0;
                                    t10 = t5.get$center().y;
                                  case 12:
                                    state0 = 0;
                                  case 13:
                                    if (state0 === 13 || state0 === 0 && $.abs$0$n($.$sub$n(t25, t10)) <= t5.get$radius())
                                      switch (state0) {
                                        case 0:
                                          t6 = t6.get$y(contact_point);
                                        case 13:
                                          state0 = 0;
                                          t8 = $.$add$ns($.$add$ns(t6, factor_y), v1y);
                                          t5.get$prev_center().y = t8;
                                      }
                                }
                          }
                        }
                    }
            }
    }
  },
  border_collide_preserve_impulse$0: function() {
    var t1, t2, t3, radius, t4, x, y, t5, vx, t6, t7, vy, t8;
    this.width = this.width;
    this.height = this.height;
    for (t1 = $.get$iterator$ax(this.circle_shapes), t2 = this.damping; t1.moveNext$0();) {
      t3 = t1.get$current();
      radius = t3.get$radius();
      t4 = t3.get$center();
      x = t4.x;
      if (typeof x !== "number")
        return this.border_collide_preserve_impulse$0$bailout(1, t2, t3, radius, x, t4, t1);
      y = t4.y;
      if (typeof y !== "number")
        return this.border_collide_preserve_impulse$0$bailout(2, t2, t3, radius, x, 0, t1, y);
      if (x - radius < 0) {
        t5 = t3.get$prev_center().x;
        if (typeof t5 !== "number")
          return this.border_collide_preserve_impulse$0$bailout(3, t2, t3, radius, 0, t5, t1, y);
        vx = (t5 - x) * t2;
        t4.x = radius;
        t4 = t3.get$center().x;
        if (typeof t4 !== "number")
          return this.border_collide_preserve_impulse$0$bailout(5, t2, t3, radius, 0, 0, t1, y, 0, t4, vx);
        t3.get$prev_center().x = t4 - vx;
      } else {
        t5 = x + radius;
        t6 = this.width;
        if (typeof t6 !== "number")
          return this.border_collide_preserve_impulse$0$bailout(6, t2, t3, radius, 0, t5, t1, y, 0, 0, 0, t6);
        if (t5 > t6) {
          t5 = t3.get$prev_center().x;
          if (typeof t5 !== "number")
            return this.border_collide_preserve_impulse$0$bailout(7, t2, t3, radius, 0, t5, t1, y);
          vx = (t5 - x) * t2;
          t4.x = t6 - radius;
          t4 = t3.get$center().x;
          if (typeof t4 !== "number")
            return this.border_collide_preserve_impulse$0$bailout(10, t2, t3, radius, 0, 0, t1, y, 0, t4, vx);
          t3.get$prev_center().x = t4 - vx;
        }
      }
      if (y - radius < 0) {
        t4 = t3.get$prev_center().y;
        if (typeof t4 !== "number")
          return this.border_collide_preserve_impulse$0$bailout(11, t2, t3, radius, 0, t4, t1);
        t6 = t3.get$center();
        t7 = t6.y;
        if (typeof t7 !== "number")
          return this.border_collide_preserve_impulse$0$bailout(12, t2, t3, radius, 0, t4, t1, 0, t7);
        vy = (t4 - t7) * t2;
        t6.y = radius;
        t6 = t3.get$center().y;
        if (typeof t6 !== "number")
          return this.border_collide_preserve_impulse$0$bailout(13, t2, t3, 0, 0, 0, t1, 0, 0, t6, 0, 0, vy);
        t3.get$prev_center().y = t6 - vy;
      } else {
        t4 = y + radius;
        t5 = this.height;
        if (typeof t5 !== "number")
          return this.border_collide_preserve_impulse$0$bailout(14, t2, t3, radius, 0, t4, t1, 0, 0, 0, 0, t5);
        if (t4 > t5) {
          t4 = t3.get$prev_center().y;
          if (typeof t4 !== "number")
            return this.border_collide_preserve_impulse$0$bailout(15, t2, t3, radius, 0, t4, t1);
          t7 = t3.get$center();
          t8 = t7.y;
          if (typeof t8 !== "number")
            return this.border_collide_preserve_impulse$0$bailout(16, t2, t3, radius, 0, t4, t1, 0, t8);
          vy = (t4 - t8) * t2;
          t7.y = t5 - radius;
          t7 = t3.get$center().y;
          if (typeof t7 !== "number")
            return this.border_collide_preserve_impulse$0$bailout(18, t2, t3, 0, 0, 0, t1, 0, 0, t7, 0, 0, vy);
          t3.get$prev_center().y = t7 - vy;
        }
      }
    }
  },
  border_collide_preserve_impulse$0$bailout: function(state0, t2, t3, radius, x, t4, t1, y, t6, t8, vx, t5, vy) {
    switch (state0) {
      case 0:
        this.width = this.width;
        this.height = this.height;
        t1 = $.get$iterator$ax(this.circle_shapes);
        t2 = this.damping;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!t1.moveNext$0())
                  break L0;
                t3 = t1.get$current();
                radius = t3.get$radius();
                t4 = t3.get$center();
                x = t4.x;
              case 1:
                state0 = 0;
                y = t4.y;
              case 2:
                state0 = 0;
              default:
                if (state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && $.$lt$n($.$sub$n(x, radius), 0) === true)
                  switch (state0) {
                    case 0:
                      t4 = t3.get$prev_center().x;
                    case 3:
                      state0 = 0;
                      t6 = t3.get$center().x;
                    case 4:
                      state0 = 0;
                      vx = $.$mul$n($.$sub$n(t4, t6), t2);
                      t3.get$center().x = radius;
                      t8 = t3.get$center().x;
                    case 5:
                      state0 = 0;
                      t8 = $.$sub$n(t8, vx);
                      t3.get$prev_center().x = t8;
                  }
                else
                  switch (state0) {
                    case 0:
                      t4 = $.$add$ns(x, radius);
                      t5 = this.width;
                    case 6:
                      state0 = 0;
                    default:
                      if (state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 0 && $.$gt$n(t4, t5) === true)
                        switch (state0) {
                          case 0:
                            t4 = t3.get$prev_center().x;
                          case 7:
                            state0 = 0;
                            t6 = t3.get$center().x;
                          case 8:
                            state0 = 0;
                            vx = $.$mul$n($.$sub$n(t4, t6), t2);
                            t8 = this.width;
                          case 9:
                            state0 = 0;
                            t8 = $.$sub$n(t8, radius);
                            t3.get$center().x = t8;
                            t8 = t3.get$center().x;
                          case 10:
                            state0 = 0;
                            t8 = $.$sub$n(t8, vx);
                            t3.get$prev_center().x = t8;
                        }
                  }
                t4 = $.getInterceptor$n(y);
              case 11:
              case 12:
              case 13:
              case 14:
              case 15:
              case 16:
              case 17:
              case 18:
                if (state0 === 13 || state0 === 12 || state0 === 11 || state0 === 0 && $.$lt$n(t4.$sub(y, radius), 0) === true)
                  switch (state0) {
                    case 0:
                      t4 = t3.get$prev_center().y;
                    case 11:
                      state0 = 0;
                      t6 = t3.get$center().y;
                    case 12:
                      state0 = 0;
                      vy = $.$mul$n($.$sub$n(t4, t6), t2);
                      t3.get$center().y = radius;
                      t8 = t3.get$center().y;
                    case 13:
                      state0 = 0;
                      t8 = $.$sub$n(t8, vy);
                      t3.get$prev_center().y = t8;
                  }
                else
                  switch (state0) {
                    case 0:
                      t4 = t4.$add(y, radius);
                      t5 = this.height;
                    case 14:
                      state0 = 0;
                    default:
                      if (state0 === 18 || state0 === 17 || state0 === 16 || state0 === 15 || state0 === 0 && $.$gt$n(t4, t5) === true)
                        switch (state0) {
                          case 0:
                            t4 = t3.get$prev_center().y;
                          case 15:
                            state0 = 0;
                            t6 = t3.get$center().y;
                          case 16:
                            state0 = 0;
                            vy = $.$mul$n($.$sub$n(t4, t6), t2);
                            t8 = this.height;
                          case 17:
                            state0 = 0;
                            t8 = $.$sub$n(t8, radius);
                            t3.get$center().y = t8;
                            t8 = t3.get$center().y;
                          case 18:
                            state0 = 0;
                            t8 = $.$sub$n(t8, vy);
                            t3.get$prev_center().y = t8;
                        }
                  }
            }
    }
  },
  border_collide$0: function() {
    var t1, t2, radius, t3, x, y, t4, t5;
    this.width = this.width;
    this.height = this.height;
    for (t1 = $.get$iterator$ax(this.circle_shapes); t1.moveNext$0();) {
      t2 = t1.get$current();
      radius = t2.get$radius();
      t3 = t2.get$center();
      x = t3.x;
      if (typeof x !== "number")
        return this.border_collide$0$bailout(1, t2, radius, x, t3, t1);
      y = t3.y;
      if (typeof y !== "number")
        return this.border_collide$0$bailout(2, t2, radius, x, 0, t1, y);
      if (x - radius < 0)
        t3.x = radius;
      else {
        t4 = x + radius;
        t5 = this.width;
        if (typeof t5 !== "number")
          return this.border_collide$0$bailout(3, t2, radius, 0, t4, t1, y, t5);
        if (t4 > t5)
          t3.x = t5 - radius;
      }
      if (y - radius < 0)
        t2.get$center().y = radius;
      else {
        t3 = y + radius;
        t4 = this.height;
        if (typeof t4 !== "number")
          return this.border_collide$0$bailout(5, t2, radius, 0, t3, t1, 0, t4);
        if (t3 > t4)
          t2.get$center().y = t4 - radius;
      }
    }
  },
  border_collide$0$bailout: function(state0, t2, radius, x, t3, t1, y, t4) {
    switch (state0) {
      case 0:
        this.width = this.width;
        this.height = this.height;
        t1 = $.get$iterator$ax(this.circle_shapes);
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!t1.moveNext$0())
                  break L0;
                t2 = t1.get$current();
                radius = t2.get$radius();
                t3 = t2.get$center();
                x = t3.x;
              case 1:
                state0 = 0;
                y = t3.y;
              case 2:
                state0 = 0;
                t3 = $.getInterceptor$n(x);
              default:
                if (state0 === 0 && $.$lt$n(t3.$sub(x, radius), 0) === true)
                  t2.get$center().x = radius;
                else
                  switch (state0) {
                    case 0:
                      t3 = t3.$add(x, radius);
                      t4 = this.width;
                    case 3:
                      state0 = 0;
                    case 4:
                      if (state0 === 4 || state0 === 0 && $.$gt$n(t3, t4) === true)
                        switch (state0) {
                          case 0:
                            t3 = this.width;
                          case 4:
                            state0 = 0;
                            t3 = $.$sub$n(t3, radius);
                            t2.get$center().x = t3;
                        }
                  }
                t3 = $.getInterceptor$n(y);
              case 5:
              case 6:
                if (state0 === 0 && $.$lt$n(t3.$sub(y, radius), 0) === true)
                  t2.get$center().y = radius;
                else
                  switch (state0) {
                    case 0:
                      t3 = t3.$add(y, radius);
                      t4 = this.height;
                    case 5:
                      state0 = 0;
                    case 6:
                      if (state0 === 6 || state0 === 0 && $.$gt$n(t3, t4) === true)
                        switch (state0) {
                          case 0:
                            t3 = this.height;
                          case 6:
                            state0 = 0;
                            t3 = $.$sub$n(t3, radius);
                            t2.get$center().y = t3;
                        }
                  }
            }
    }
  },
  apply_gravity$0: function() {
    var t1, t2, t3, t5, t7, t9;
    for (t1 = $.get$iterator$ax(this.circle_shapes); t1.moveNext$0();) {
      t2 = t1.get$current();
      t3 = t2.get$ay();
      if (typeof t3 !== "number")
        return this.apply_gravity$0$bailout(1, t2, t3, t1);
      t5 = this.gravity.y;
      if (typeof t5 !== "number")
        return this.apply_gravity$0$bailout(2, t2, t3, t1, t5);
      t2.set$ay(t3 + t5);
      t7 = t2.get$ax();
      if (typeof t7 !== "number")
        return this.apply_gravity$0$bailout(3, t2, 0, t1, 0, t7);
      t9 = this.gravity.x;
      if (typeof t9 !== "number")
        return this.apply_gravity$0$bailout(4, t2, 0, t1, 0, t7, t9);
      t2.set$ax(t7 + t9);
    }
  },
  apply_gravity$0$bailout: function(state0, t2, t3, t1, t5, t7, t9) {
    switch (state0) {
      case 0:
        t1 = $.get$iterator$ax(this.circle_shapes);
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!t1.moveNext$0())
                  break L0;
                t2 = t1.get$current();
                t3 = t2.get$ay();
              case 1:
                state0 = 0;
                t5 = this.gravity.y;
              case 2:
                state0 = 0;
                t2.set$ay($.$add$ns(t3, t5));
                t7 = t2.get$ax();
              case 3:
                state0 = 0;
                t9 = this.gravity.x;
              case 4:
                state0 = 0;
                t2.set$ax($.$add$ns(t7, t9));
            }
    }
  },
  inertia$0: function() {
    for (var t1 = $.get$iterator$ax(this.circle_shapes); t1.moveNext$0();)
      t1.get$current().inertia$0();
  },
  accelerate$1: function(delta) {
    var t1;
    for (t1 = $.get$iterator$ax(this.circle_shapes); t1.moveNext$0();)
      t1.get$current().accelerate$1(delta);
  },
  step$0: function(_) {
    var t1, t2, i, t3;
    for (t1 = this.friction, t2 = t1 !== 0, i = 0; i < 2; ++i) {
      if (t2)
        for (t3 = $.get$iterator$ax(this.circle_shapes); t3.moveNext$0();)
          t3.get$current().apply_friction$1(t1);
      this.apply_gravity$0();
      for (t3 = $.get$iterator$ax(this.circle_shapes); t3.moveNext$0();)
        t3.get$current().accelerate$1(0.5);
      this.colide_with_lines$1(true);
      this.collide$1(false);
      this.border_collide$0();
      for (t3 = $.get$iterator$ax(this.circle_shapes); t3.moveNext$0();)
        t3.get$current().inertia$0();
      this.collide$1(true);
      this.border_collide_preserve_impulse$0();
    }
  },
  add_circle_shape$1: function(shape) {
    $.add$1$ax(this.circle_shapes, shape);
  },
  VertieWorld$4: function(width, height, damping, friction) {
    this.circle_shapes = [];
    this.lines = [];
    this.gravity = $.VertieVector$(0, 0);
  }
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
};

// Bound closures
$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};

$$.BoundClosure$2 = {"": "Closure;self,target",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  }
};

$$.BoundClosure$0 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};

Isolate.$finishClasses($$, $, null);
$$ = null;

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !src.$isJavaScriptIndexingBehavior()))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.$isJavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart) {
    if (typeof count !== "number")
      throw $.iae(count);
    i = srcStart + count - 1;
    j = dstStart + count - 1;
    t1 = src.length;
    t2 = dst.length;
    for (; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  } else {
    t1 = src.length;
    t2 = dst.length;
    j = dstStart;
    i = srcStart;
    while (true) {
      if (typeof count !== "number")
        throw $.iae(count);
      if (!(i < srcStart + count))
        break;
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
      ++i;
      ++j;
    }
  }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if ($.JSNumber_methods.$lt(srcStart, dstStart)) {
    if (typeof count !== "number")
      throw $.iae(count);
    i = srcStart + count - 1;
    j = $.$sub$n($.$add$ns(dstStart, count), 1);
    t1 = $.getInterceptor$asx(src);
    for (; i >= srcStart; --i, j = $.$sub$n(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
  } else {
    t1 = $.getInterceptor$asx(src);
    j = dstStart;
    i = srcStart;
    while (true) {
      if (typeof count !== "number")
        throw $.iae(count);
      if (!(i < srcStart + count))
        break;
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
      ++i;
      j = $.$add$ns(j, 1);
    }
  }
};

$.ListIterator$ = function(iterable) {
  return new $.ListIterator(iterable, iterable.length, 0, null);
};

$.ToString_collectionToString = function(c) {
  var result = $.StringBuffer$("");
  $.ToString__emitCollection(c, result, $.List_List($));
  return result.toString$0(result);
};

$.ToString__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, first, t3;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.$isList());
  result.write$1(isList ? "[" : "{");
  for (t2 = $.get$iterator$ax(c), first = true; t2.moveNext$0(); first = false) {
    t3 = t2.get$current();
    if (!first)
      result.write$1(", ");
    $.ToString__emitObject(t3, result, visiting);
  }
  result.write$1(isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.$isCollection()))
    if ($.ToString__containsRef(visiting, o))
      result.write$1(typeof o === "object" && o !== null && (o.constructor === Array || o.$isList()) ? "[...]" : "{...}");
    else
      $.ToString__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && !!o.$isMap)
    if ($.ToString__containsRef(visiting, o))
      result.write$1("{...}");
    else
      $.ToString__emitMap(o, result, visiting);
  else
    result.write$1(o);
};

$.ToString__containsRef = function(c, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(c); t1.moveNext$0();)
    if (t1.get$current() === ref)
      return true;
  return false;
};

$.ToString_mapToString = function(m) {
  var result = $.StringBuffer$("");
  $.ToString__emitMap(m, result, $.List_List($));
  return result.toString$0(result);
};

$.ToString__emitMap = function(m, result, visiting) {
  var t1, t2;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  result.write$1("{");
  t1.first_0 = true;
  m.forEach$1(m, new $.ToString__emitMap_anon(t1, result, visiting));
  result.write$1("}");
  t2.removeLast$0(visiting);
};

$.JsIsolateSink$fromPort = function(_port) {
  return new $.JsIsolateSink(false, _port);
};

$._callInIsolate = function(isolate, $function) {
  isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
};

$._currentIsolate = function() {
  return $globalState.currentContext;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue(), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.$$throw($.UnsupportedError$("Cannot extract URI from \"" + $.S(stack) + "\""));
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, t2, entryPoint, replyTo, context;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      t2 = t1.$index(msg, "id");
      $globalState.currentManagerId = t2;
      entryPoint = $[t1.$index(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_function(entryPoint, replyTo), "worker-start");
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      t1 = $globalState.managers;
      t2 = $.getInterceptor$x(sender);
      t1.remove$1(t1, t2.get$id(sender));
      t2.terminate$0(sender);
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.$$throw(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $.lazyPort = $.ReceivePortImpl$();
  replyTo.send$2("spawned", $._Isolate_port().toSendPort$0());
  topLevel.call$0();
};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, t2, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  t1 = $.getInterceptor$x(worker);
  t1.set$onmessage(worker, function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t2 = $globalState;
  workerId = t2.nextManagerId;
  t2.nextManagerId = workerId + 1;
  t1.set$id(worker, workerId);
  t2 = $globalState.managers;
  t2.$indexSet(t2, workerId, worker);
  t1.postMessage$1(worker, $._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return $.get$globalThis().setTimeout != null;
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number" && value !== 0 || typeof value === "boolean")
    return String(value);
  if (value == null)
    return "null";
  res = $.toString$0(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$add$ns($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$eq($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_newFixedList = function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$.Primitives_getYear = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0) : ($.Primitives_lazyAsJsDate(receiver).getFullYear() + 0);
};

$.Primitives_getMonth = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
};

$.Primitives_getDay = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0) : ($.Primitives_lazyAsJsDate(receiver).getDate() + 0);
};

$.Primitives_getHours = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0) : ($.Primitives_lazyAsJsDate(receiver).getHours() + 0);
};

$.Primitives_getMinutes = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMinutes() + 0);
};

$.Primitives_getSeconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getSeconds() + 0);
};

$.Primitives_getMilliseconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0);
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.JSArray_methods.get$iterator(keyValuePairs);
  result = $.LinkedHashMap$();
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (t1.$eq(numberOfArguments, 1) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($._currentIsolate(), $.invokeClosure.call$5);
  closure.$identity = $function;
  return $function;
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "WebKitMutationObserver")
    return "MutationObserver";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  return $name;
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "MouseScrollEvent")
    return "WheelEvent";
  if ($name === "OfflineResourceList")
    return "DOMApplicationCache";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "MouseWheelEvent")
    return "WheelEvent";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function($function, object, property) {
  return $function.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (typeof(navigator) !== "object")
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, $name, methods, $arguments) {
  var hasOwnPropertyFunction, tag, method, secondTag, proto;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if (!$.isDartObject(obj)) {
    tag = $.getTypeNameOf(obj);
    method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
    if (method == null) {
      secondTag = $.alternateTag(obj, tag);
      if (secondTag != null)
        method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
    }
  } else
    method = null;
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT8));
  if (method == null)
    (function(){throw new TypeError($name + " is not a function");})();
  else {
    proto = Object.getPrototypeOf(obj);
    if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, $name))
      $.defineProperty(proto, $name, method);
  }
  return method.apply(obj, $arguments);
};

$.isDartObject = function(obj) {
  return ((obj) instanceof ($.Object));
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && $._dynamicMetadata0() != null)
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (method != null)
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function($name) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[$name];
  if (f != null && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT8)[$name];
  if (dartMethod != null)
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, $name, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, $name, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined")
    $._dynamicMetadata([]);
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace("$", "$$$$"));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result.write$1(to);
      for (i = 0; i < $length; ++i) {
        result.write$1(receiver[i]);
        result.write$1(to);
      }
      return result.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to);
};

$.AsyncError$ = function(error, stackTrace) {
  return new $.AsyncError(error, stackTrace, null);
};

$.AsyncError$withCause = function(error, stackTrace, cause) {
  return new $.AsyncError(error, stackTrace, cause);
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$(), false);
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(0, null);
};

$._FutureImpl$immediate = function(value) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediate$1(value);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures) {
  var t1, t2, t3, t4, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.JSArray_methods.get$iterator(futures); t3.moveNext$0();) {
    t4 = t3.get$current();
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    t4.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, pos));
  }
  if ($.$eq(t1.remaining_2, 0) === true)
    return $._FutureImpl$immediate($.CONSTANT4);
  t1.values_1 = $.List_List(t1.remaining_2);
  t1.completer_0 = $._CompleterImpl$();
  return t1.completer_0.future;
};

$._ThenFuture$ = function(_onValue) {
  return new $._ThenFuture(_onValue, null, 0, null);
};

$._CatchErrorFuture$ = function(_onError, _test) {
  return new $._CatchErrorFuture(_test, _onError, null, 0, null);
};

$._SubscribeFuture$ = function(onValue, _onError) {
  return new $._SubscribeFuture(_onError, onValue, null, 0, null);
};

$._FutureWrapper$ = function(_future) {
  return new $._FutureWrapper(_future);
};

$.Timer_Timer = function(duration, callback) {
  var milliseconds = duration.get$inMilliseconds();
  if (milliseconds < 0)
    milliseconds = 0;
  return $.TimerImpl$(milliseconds, callback);
};

$.Timer_run = function(callback) {
  $.add$1$ax($.get$Timer__runCallbacks(), callback);
  if ($.$eq($.get$length$asx($.get$Timer__runCallbacks()), 1) === true)
    $.Timer_Timer($.CONSTANT5, new $.Timer_run_anon());
};

$.IterableMixinWorkaround_setRangeList = function(list, start, $length, from, startFrom) {
  var t1 = $.getInterceptor($length);
  if (t1.$eq($length, 0) === true)
    return;
  if (t1.$lt($length, 0) === true)
    throw $.$$throw($.ArgumentError$($length));
  t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) === true)
    throw $.$$throw($.RangeError$value(start));
  if ($.$gt$n(t1.$add(start, $length), list.length) === true)
    throw $.$$throw($.RangeError$value(t1.$add(start, $length)));
  $.Arrays_copy(from, startFrom, list, start, $length);
};

$._HashMapTable$ = function() {
  var t1 = new $._HashMapTable(null, 8, 0, 0, 0, null);
  t1._HashTable$1(8);
  return t1;
};

$.HashMap$ = function() {
  var t1 = new $.HashMap($._HashMapTable$());
  t1.HashMap$0();
  return t1;
};

$._HashTableKeyIterable$ = function(hashTable) {
  return new $._HashTableKeyIterable(hashTable);
};

$._HashTableKeyIterator$ = function(hashTable) {
  return new $._HashTableKeyIterator(hashTable, hashTable._modificationCount, 0, null);
};

$._HashTableValueIterable$ = function(hashTable, _entryIndex) {
  return new $._HashTableValueIterable(_entryIndex, hashTable);
};

$._HashTableValueIterator$ = function(hashTable, _entryIndex) {
  return new $._HashTableValueIterator(_entryIndex, hashTable, hashTable._modificationCount, 0, null);
};

$._LinkedHashMapTable$ = function() {
  var t1 = new $._LinkedHashMapTable(null, 8, 0, 0, 0, null);
  t1._HashTable$1(8);
  return t1;
};

$.LinkedHashMap$ = function() {
  var t1 = new $.LinkedHashMap($._LinkedHashMapTable$());
  t1.LinkedHashMap$0();
  return t1;
};

$._LinkedHashTableKeyIterable$ = function(_table) {
  return new $._LinkedHashTableKeyIterable(_table);
};

$._LinkedHashTableKeyIterator$ = function(hashTable) {
  return new $._LinkedHashTableKeyIterator(hashTable, hashTable._modificationCount, hashTable._next$1(0), null);
};

$._LinkedHashTableValueIterable$ = function(_hashTable, _valueIndex) {
  return new $._LinkedHashTableValueIterable(_hashTable, _valueIndex);
};

$._LinkedHashTableValueIterator$ = function(hashTable, _valueIndex) {
  return new $._LinkedHashTableValueIterator(_valueIndex, hashTable, hashTable._modificationCount, hashTable._next$1(0), null);
};

$.Queue_Queue = function() {
  return $.ListQueue$(null);
};

$.ListQueue$ = function(initialCapacity) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  t1.ListQueue$1(initialCapacity);
  return t1;
};

$.ListQueue__isPowerOf2 = function(number) {
  return $.JSNull_methods.$and(number, $.JSNull_methods.$sub(number, 1)) === 0;
};

$.ListQueue__nextPowerOf2 = function(number) {
  var number0, nextNumber;
  number0 = $.$shl$n(number, 2) - 1;
  for (number = number0; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
};

$._ListQueueIterator$ = function(queue) {
  return new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
};

$.DateTime$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
};

$.DateTime$_now = function() {
  var t1 = new $.DateTime($.Primitives_dateNow(), false);
  t1.DateTime$_now$0();
  return t1;
};

$.Duration$ = function(days, hours, microseconds, milliseconds, minutes, seconds) {
  if (typeof microseconds !== "number")
    throw $.iae(microseconds);
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string")
    return "\"" + $.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"") + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.RangeError$range = function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.List_List = function($length) {
  var t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  return $.Primitives_newFixedList($length);
};

$.List_List$from = function(other, growable) {
  var list, t1, $length, fixedList, i;
  list = $.List_List($);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable === true)
    return list;
  $length = list.length;
  fixedList = $.List_List($length);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    fixedList[i] = list[i];
  }
  return fixedList;
};

$.Map_Map = function() {
  return $.HashMap$();
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.window = function() {
  return window;
};

$.DivElement_DivElement = function() {
  return $.$$dom_createElement$1$x(document, "div");
};

$.MutationObserver_MutationObserver = function(callback) {
  0;
  return new(window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver)($.convertDartClosureToJS(callback, 2));
};

$._EventStream$ = function(_target, _eventType, _useCapture) {
  return new $._EventStream(_target, _eventType, _useCapture);
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture);
  return t1;
};

$.Rect$ = function(left, $top, width, height) {
  return new $.Rect(left, $top, width, height);
};

$._MicrotaskScheduler__MicrotaskScheduler$best = function(callback) {
  if (!!(window.setImmediate))
    return $._SetImmediateScheduler$(callback);
  else if (!!(window.MutationObserver || window.WebKitMutationObserver))
    return $._MutationObserverScheduler$(callback);
  return $._PostMessageScheduler$(callback);
};

$._PostMessageScheduler$ = function(callback) {
  var t1 = new $._PostMessageScheduler("DART-MICROTASK", false, callback);
  t1._PostMessageScheduler$1(callback);
  return t1;
};

$._MutationObserverScheduler$ = function(callback) {
  var t1 = new $._MutationObserverScheduler(null, null, false, callback);
  t1._MutationObserverScheduler$1(callback);
  return t1;
};

$._SetImmediateScheduler$ = function(callback) {
  return new $._SetImmediateScheduler(false, callback);
};

$._maybeScheduleMicrotaskFrame = function() {
  if ($._microtaskScheduler == null)
    $._microtaskScheduler = $._MicrotaskScheduler__MicrotaskScheduler$best($._completeMicrotasks);
  $._microtaskScheduler.maybeSchedule$0();
};

$._addMicrotaskCallback = function(callback) {
  if ($._pendingMicrotasks == null) {
    $._pendingMicrotasks = [];
    $._maybeScheduleMicrotaskFrame();
  }
  $.add$1$ax($._pendingMicrotasks, callback);
};

$._completeMicrotasks = function() {
  var callbacks, t1;
  callbacks = $._pendingMicrotasks;
  $._pendingMicrotasks = null;
  for (t1 = $.get$iterator$ax(callbacks); t1.moveNext$0();)
    t1.get$current().call$0();
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.get$length$asx(array), -1, null);
};

$.convertDartToNative_Dictionary = function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  $.JSNull_methods.forEach$1(dict, new $.convertDartToNative_Dictionary_anon(object));
  return object;
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var copies, t1, t2, t3, t4, copy;
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot([], copies);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t2, t3).call$1(value);
  t4.call$0();
  return copy;
};

$.Lists_getRange = function(a, start, end, accumulator) {
  var t1, i;
  if (end !== (end | 0))
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (end < start)
    throw $.$$throw($.RangeError$value(end));
  t1 = $.getInterceptor$asx(a);
  if (end > t1.get$length(a))
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i)
    accumulator.push(t1.$index(a, i));
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, end, accumulator) {
  var t1, t2, i;
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start))
    throw $.$$throw($.RangeError$value(end));
  t2 = $.getInterceptor$asx(a);
  if (t1.$gt(end, t2.get$length(a)))
    throw $.$$throw($.RangeError$value(end));
  for (i = start; $.JSNumber_methods.$lt(i, end); ++i)
    accumulator.push(t2.$index(a, i));
  return accumulator;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$.Random_Random = function(seed) {
  return $.CONSTANT7;
};

$.main = function() {
  var simulation = $.SimulationSystem$($.query$1$x(document, "#container"));
  simulation.start$0(simulation);
};

$.showFps = function(fps) {
  var t1, t2;
  if ($.fpsAverage == null)
    $.fpsAverage = fps;
  t1 = $.$mul$n($.fpsAverage, 0.95);
  if (typeof t1 !== "number")
    throw $.iae(t1);
  $.fpsAverage = fps * 0.05 + t1;
  t2 = $.S($.toInt$0$n($.round$0$n($.fpsAverage))) + " fps";
  $.getInterceptor$x($.query$1$x(document, "#notes")).textContent = t2;
};

$.SimulationSystem$ = function(canvas) {
  var t1 = new $.SimulationSystem(canvas, null, null, null, null, null);
  t1.SimulationSystem$1(canvas);
  return t1;
};

$.VertiePoint$ = function(x, y) {
  return new $.VertiePoint(x, y);
};

$.VertieVector$ = function(x, y) {
  return new $.VertieVector(x, y);
};

$.VertieCircleShape$ = function(center, radius) {
  var t1 = new $.VertieCircleShape(radius, center, null, null, null);
  t1.VertieCircleShape$2(center, radius);
  return t1;
};

$.VertieWorld$ = function(width, height, damping, friction) {
  var t1 = new $.VertieWorld(null, null, width, height, damping, friction, null);
  t1.VertieWorld$4(width, height, damping, friction);
  return t1;
};

$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$._completeMicrotasks.call$0 = $._completeMicrotasks;
$._completeMicrotasks.$name = "_completeMicrotasks";
$.num = {builtin$cls: "num"};
$.Node = {builtin$cls: "Node"};
$.ReceivePort = {builtin$cls: "ReceivePort"};
$.$int = {builtin$cls: "$int"};
$.String = {builtin$cls: "String"};
$._ManagerStub = {builtin$cls: "_ManagerStub"};
$.List = {builtin$cls: "List"};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT4 = Isolate.makeConstantList([]);
$.CONSTANT8 = new $.Object();
$.CONSTANT = new $.NullThrownError();
$.JSDouble_methods = $.JSDouble.prototype;
$.CONSTANT7 = new $._Random();
$.CONSTANT3 = new $._LinkedHashTableHeadMarker();
$.JSNull_methods = $.JSNull.prototype;
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$.CONSTANT0 = new $.EventStreamProvider("message");
$.CONSTANT6 = new $.CloseToken();
$.JSInt_methods = $.JSInt.prototype;
$.JSArray_methods = $.JSArray.prototype;
$.CONSTANT5 = new $.Duration(0);
$.CONSTANT1 = new $._DeadEntry();
$.CONSTANT2 = new $._NullKey();
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$._pendingMicrotasks = null;
$._microtaskScheduler = null;
$.fpsAverage = null;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_createElement$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).$$dom_createElement$1(receiver, a0);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (!(typeof receiver == "object"))
    return !(a0 == null) && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$._setImmediate$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver)._setImmediate$1(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.addAll$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
$.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$client$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$client(receiver);
};
$.get$context2d$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$context2d(receiver);
};
$.get$error$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$error(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$onMessage$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMessage(receiver);
};
$.observe$2$attributes$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).observe$2$attributes(receiver, a0, a1);
};
$.postMessage$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).postMessage$1(receiver, a0);
};
$.postMessage$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).postMessage$2(receiver, a0, a1);
};
$.query$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).query$1(receiver, a0);
};
$.requestAnimationFrame$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).requestAnimationFrame$1(receiver, a0);
};
$.round$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).round$0(receiver);
};
$.set$height$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$height(receiver, value);
};
$.set$width$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$width(receiver, value);
};
$.setImmediate$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).setImmediate$1(receiver, a0);
};
$.sublist$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
$.toInt$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).toInt$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return void 0;
  return receiver;
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== (void 0);
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "_runCallbacks", "Timer__runCallbacks", "get$Timer__runCallbacks", function() {
  return [];
});
var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
// Native classes
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  $isJavaScriptIndexingBehavior: function() {
    return false;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isCollection: function() {
    return false;
  },
  $asCollection: function() {
    return null;
  },
  $isList: function() {
    return false;
  },
  $asList: function() {
    return null;
  },
  $isArrayBufferView: function() {
    return false;
  },
  $asArrayBufferView: function() {
    return null;
  },
  toString$0: function(_) {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function(_) {
    return $.hashCodeForNativeObject(this);
  },
  $eq: function(_, a) {
    return this === a;
  }
});

$.$defineNativeClass("Worker", {
  get$id: function(receiver) {
    return receiver.id;
  },
  set$id: function(receiver, i) {
    receiver.id = i;
  },
  set$onmessage: function(receiver, f) {
    receiver.onmessage = f;
  },
  postMessage$1: function(receiver, msg) {
    receiver.postMessage(msg);
  },
  terminate$0: function(receiver) {
    receiver.terminate();
  }
});

$.$defineNativeClass("HTMLAnchorElement", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("ArrayBufferView", {
  $isArrayBufferView: function() {
    return true;
  },
  $asArrayBufferView: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLBodyElement", {
  get$onMessage: function(receiver) {
    return $.CONSTANT0.forTarget$1(receiver);
  }
});

$.$defineNativeClass("HTMLCanvasElement", {"": "height%,width%",
  getContext$2: function(receiver, contextId, attrs) {
    var t1 = $ === attrs;
    if (t1)
      attrs = null;
    if (!t1)
      return this._getContext_1$2(receiver, contextId, $.convertDartToNative_Dictionary(attrs));
    return this._getContext_2$1(receiver, contextId);
  },
  getContext$1: function($receiver, contextId) {
    return this.getContext$2($receiver, contextId, $);
  },
  _getContext_1$2: function(receiver, contextId, attrs) {
    return receiver.getContext(contextId,attrs);
  },
  _getContext_2$1: function(receiver, contextId) {
    return receiver.getContext(contextId);
  },
  get$context2d: function(receiver) {
    return this.getContext$1(receiver, "2d");
  }
});

$.$defineNativeClass("CanvasRenderingContext", {"": "canvas="});

$.$defineNativeClass("CanvasRenderingContext2D", {"": "fillStyle},lineWidth},strokeStyle}",
  $$dom_arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
    return receiver.arc(x,y,radius,startAngle,endAngle,anticlockwise);
  },
  beginPath$0: function(receiver) {
    return receiver.beginPath();
  },
  clearRect$4: function(receiver, x, y, width, height) {
    return receiver.clearRect(x,y,width,height);
  },
  closePath$0: function(receiver) {
    return receiver.closePath();
  },
  fill$1: function(receiver, winding) {
    return receiver.fill(winding);
  },
  fill$0: function($receiver) {
    return $receiver.fill();
  },
  stroke$0: function(receiver) {
    return receiver.stroke();
  },
  arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
    this.$$dom_arc$6(receiver, x, y, radius, startAngle, endAngle, anticlockwise);
  }
});

$.$defineNativeClass("CharacterData", {"": "length="});

$.$defineNativeClass("CSSStyleDeclaration", {"": "length=",
  _getPropertyValue$1: function(receiver, propertyName) {
    return receiver.getPropertyValue(propertyName);
  },
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = this._getPropertyValue$1(receiver, propertyName);
    return propValue != null ? propValue : "";
  },
  get$height: function(receiver) {
    return this.getPropertyValue$1(receiver, "height");
  },
  get$width: function(receiver) {
    return this.getPropertyValue$1(receiver, "width");
  }
});

$.$defineNativeClass("Document", {
  $$dom_createElement$1: function(receiver, tagName) {
    return receiver.createElement(tagName);
  },
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  }
});

$.$defineNativeClass("DOMException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("Element", {"": "id=",
  get$client: function(receiver) {
    return $.Rect$(this.clientLeft, this.clientTop, this.clientWidth, this.clientHeight);
  }
});

$.$defineNativeClass("HTMLEmbedElement", {"": "height%,width%"});

$.$defineNativeClass("EventException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("EventTarget", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_addEventListener$3")) {
      return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_addEventListener$3.call(this, receiver, type, listener, useCapture);
  }
});

$.$defineNativeClass("FileException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length="});

$.$defineNativeClass("HTMLCollection", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("XMLHttpRequestException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("HTMLIFrameElement", {"": "height%,width%"});

$.$defineNativeClass("HTMLImageElement", {"": "height%,width%,x=,y="});

$.$defineNativeClass("HTMLInputElement", {"": "height%,width%"});

$.$defineNativeClass("HTMLMediaElement", {"": "error="});

$.$defineNativeClass("MutationObserver", {
  observe$8$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$subtree: function(receiver, target, attributeFilter, attributeOldValue, attributes, characterData, characterDataOldValue, childList, subtree) {
    var parsedOptions, t1;
    parsedOptions = {};
    t1 = new $.MutationObserver_observe_override(parsedOptions);
    t1.call$2("childList", childList);
    t1.call$2("attributes", attributes);
    t1.call$2("characterData", characterData);
    t1.call$2("subtree", subtree);
    t1.call$2("attributeOldValue", attributeOldValue);
    t1.call$2("characterDataOldValue", characterDataOldValue);
    if (attributeFilter != null)
      t1.call$2("attributeFilter", attributeFilter);
    this._call$2(receiver, target, parsedOptions);
  },
  observe$2$attributes: function($receiver, target, attributes) {
    return this.observe$8$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$subtree($receiver, target, null, null, attributes, null, null, null, null);
  },
  _call$2: function(receiver, target, options) {
    return receiver.observe(target,options);
  }
});

$.$defineNativeClass("Node", {
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
});

$.$defineNativeClass("NodeList", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLObjectElement", {"": "height%,width%"});

$.$defineNativeClass("RangeException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("HTMLSelectElement", {"": "length="});

$.$defineNativeClass("SpeechRecognitionError", {"": "error="});

$.$defineNativeClass("Uint8Array", {
  get$length: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$length")) {
      return receiver.length;
    } else
      return Object.prototype.get$length.call(this, receiver);
  },
  $index: function(receiver, index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$index")) {
      return receiver[index];
    } else
      return Object.prototype.$index.call(this, receiver, index);
  },
  $indexSet: function(receiver, index, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$indexSet")) {
      receiver[index] = value;
    } else
      return Object.prototype.$indexSet.call(this, receiver, index, value);
  },
  get$iterator: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$iterator")) {
      return $.FixedSizeListIterator$(receiver);
    } else
      return Object.prototype.get$iterator.call(this, receiver);
  },
  forEach$1: function(receiver, f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("forEach$1")) {
      var t1;
      for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
        f.call$1(t1.get$current());
      return;
    } else
      return Object.prototype.forEach$1.call(this, receiver, f);
  },
  add$1: function(receiver, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("add$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.add$1.call(this, receiver, value);
  },
  addAll$1: function(receiver, iterable) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addAll$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addAll$1.call(this, receiver, iterable);
  },
  removeLast$0: function(receiver) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeLast$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeLast$0.call(this, receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (Object.getPrototypeOf(this).hasOwnProperty("sublist$2")) {
      if (end == null)
        end = this.get$length(receiver);
      return $.Lists_getRange(receiver, start, end, []);
    } else
      return Object.prototype.sublist$2.call(this, receiver, start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("Uint8ClampedArray", {
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("HTMLVideoElement", {"": "height%,width%"});

$.$defineNativeClass("DOMWindow", {
  setImmediate$1: function(receiver, callback) {
    $._addMicrotaskCallback(callback);
  },
  requestAnimationFrame$1: function(receiver, callback) {
    this._ensureRequestAnimationFrame$0(receiver);
    return this._requestAnimationFrame$1(receiver, callback);
  },
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  _setImmediate$1: function(receiver, callback) {
    receiver.setImmediate($.convertDartClosureToJS(callback, 0));
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  postMessage$3: function(receiver, message, targetOrigin, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      this._postMessage_1$3(receiver, $._convertDartToNative_PrepareForStructuredClone(message), targetOrigin, messagePorts);
      return;
    }
    this._postMessage_2$2(receiver, $._convertDartToNative_PrepareForStructuredClone(message), targetOrigin);
    return;
  },
  postMessage$2: function($receiver, message, targetOrigin) {
    return this.postMessage$3($receiver, message, targetOrigin, $);
  },
  _postMessage_1$3: function(receiver, message, targetOrigin, messagePorts) {
    return receiver.postMessage(message,targetOrigin,messagePorts);
  },
  _postMessage_2$2: function(receiver, message, targetOrigin) {
    return receiver.postMessage(message,targetOrigin);
  },
  get$onMessage: function(receiver) {
    return $.CONSTANT0.forTarget$1(receiver);
  }
});

$.$defineNativeClass("XPathException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
});

$.$defineNativeClass("SVGFEBlendElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEColorMatrixElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEComponentTransferElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFECompositeElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEConvolveMatrixElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEDiffuseLightingElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEDisplacementMapElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEFloodElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEGaussianBlurElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEImageElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEMergeElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEMorphologyElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEOffsetElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFEPointLightElement", {"": "x=,y="});

$.$defineNativeClass("SVGFESpecularLightingElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFESpotLightElement", {"": "x=,y="});

$.$defineNativeClass("SVGFETileElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFETurbulenceElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGFilterElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGForeignObjectElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGImageElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGMaskElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGPatternElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGRectElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGElement", {
  get$id: function(receiver) {
    return receiver.id;
  }
});

$.$defineNativeClass("SVGException", {
  toString$0: function(receiver) {
    return receiver.toString();
  }
});

$.$defineNativeClass("SVGSVGElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGTextPositioningElement", {"": "x=,y="});

$.$defineNativeClass("SVGUseElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGCursorElement", {"": "x=,y="});

$.$defineNativeClass("SVGFEDropShadowElement", {"": "height=,width=,x=,y="});

$.$defineNativeClass("SVGGlyphRefElement", {"": "x=,y="});

// 68 dynamic classes.
// 198 classes
// 20 !leaf
(function() {
  var v0_Uint8Array = "Uint8Array|Uint8ClampedArray", v1_TextPositioningElement = "SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement", v2_MediaElement = "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement", v3_SvgElement = [v1_TextPositioningElement, "SVGAElement|SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGCircleElement|SVGClipPathElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRadialGradientElement|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGStyledElement|SVGSwitchElement|SVGSymbolElement|SVGTextContentElement|SVGTextPathElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement"].join("|"), v4_Element = [v2_MediaElement, v3_SvgElement, "Element|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement"].join("|"), v5_CharacterData = "CDATASection|CharacterData|Comment|Text", v6_Document = "Document|HTMLDocument|SVGDocument", v7_Node = [v4_Element, v5_CharacterData, v6_Document, "Attr|DocumentFragment|DocumentType|EntityReference|Node|Notation|ProcessingInstruction|ShadowRoot"].join("|");
  $.dynamicSetMetadata([["Uint8Array", v0_Uint8Array], ["ArrayBufferView", [v0_Uint8Array, "ArrayBufferView"].join("|")], ["CanvasRenderingContext", "CanvasRenderingContext|CanvasRenderingContext2D|WebGLRenderingContext"], ["CharacterData", v5_CharacterData], ["Document", v6_Document], ["HTMLMediaElement", v2_MediaElement], ["SVGTextPositioningElement", v1_TextPositioningElement], ["SVGElement", v3_SvgElement], ["Element", v4_Element], ["Node", v7_Node], ["EventTarget", [v7_Node, "DOMWindow|EventTarget"].join("|")], ["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["NodeList", "NodeList|RadioNodeList"]]);
})();

$.main.call$0 = $.main;
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = fields[i];
        field = generateAccessor(field, prototype);
        str += field;
        body += "this." + field + " = " + field + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = cls;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", ["f?"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var fields = desc[""], supr;
        if (typeof fields == "string") {
          var s = fields.split(";");
          supr = s[0];
          fields = s[1] == "" ? [] : s[1].split(",");
        } else {
          supr = desc.super;
        }
        isolateProperties[cls] = defineClass(cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if ((!superclass || typeof superclass) != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=testbed.dart.js.map
